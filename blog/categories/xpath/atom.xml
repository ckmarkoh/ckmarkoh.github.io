<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xpath | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/xpath/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2016-12-11T00:46:52+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note on Xpath Parsing]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/13/note-on-xpath-parsing/"/>
    <updated>2014-03-13T06:45:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/13/note-on-xpath-parsing</id>
    <content type="html"><![CDATA[<p>本篇是我在使用xpath中遇到的一些案例,做些筆記</p>

<p>xpath是什麼,簡而言之,就是可以把網頁的html碼當成Tree</p>

<p>並且用xpath去取得Tree中的某些nodes或leaves</p>

<p>若想了解更多關於xpath是什麼,可以考以下網站</p>

<p>http://www.w3schools.com/XPath/default.asp</p>

<p>以下的xpath實作是以jquery的$$x(“xpath”)`經由chrome brwser的console來操作</p>

<p>至於xpath的實際應用,可以用在web crawler中從網頁中擷取想要的東西</p>

<p>這樣就不需要自己寫個parser來處理html了</p>

<!--more-->

<h2 id="following-sibling-preceding-sibling">1.following-sibling, preceding-sibling:</h2>

<p>首先來看以下這種情況</p>

<p>```html example1.html
1<br /> 2<br /> 3 <br /> 4 </p>

<p>```</p>

<p>這些數字是和br相鄰,而不是被它給包住</p>

<p>這時就要用到sibling來把數字取出</p>

<p>```javascript</p>

<blockquote>
  <p>$x(“//br[3]/following-sibling::text()”)
[” 4 “]</p>
</blockquote>

<blockquote>
  <p>$x(“//br[2]/following-sibling::text()”)
[ “ 3 “ , “ 4 “ ]</p>
</blockquote>

<blockquote>
  <p>$x(“//br[1]/following-sibling::text()”)
[” 2 “, “ 3 “ , “ 4 “ ]</p>
</blockquote>

<blockquote>
  <p>$x(“//br[2]/preceding-sibling::text()”)
[” 2 “, “ 1 “]</p>
</blockquote>

<p>```</p>

<p>也可以把text和br的位置互換</p>

<p>```</p>

<blockquote>
  <p>$x(“//text()[following-sibling::br[3]]”)
[ “ 1 “ ]</p>
</blockquote>

<blockquote>
  <p>$x(“//text()[following-sibling::br[2]]”)
[ “ 1 “ , “ 2 “ ]</p>
</blockquote>

<blockquote>
  <p>$x(“//text()[following-sibling::br[1]]”)
[ “ 1 “ , “ 2 “ , “ 3 “ ]</p>
</blockquote>

<blockquote>
  <p>$x(“//text()[preceding-sibling::br[2]]”)
[ “ 3 “ , “ 4 “ ]</p>
</blockquote>

<p>```</p>

<h2 id="table-position--last">2.table position() , last()</h2>

<p>如果我們要取出以下表格中的某幾個column</p>

<p>```html example2.html</p>
<table>
    <tbody>
         <tr> <td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td> </tr>
        <tr> <td>21</td><td>22</td><td>23</td><td>24</td><td>25</td><td>26</td> </tr>
    </tbody>
<table>

```


可以用這個方法



```javascript

&gt; $x("//table/tbody/tr/td[last()]/text()")
[ "16" , "26" ]

&gt; $x("//table/tbody/tr/td[last()-1]/text()")
[ "15" , "25" ]

&gt; $x("//table/tbody/tr/td[position() mod 3 = 1]/text()")
[ "11" , "14" , "21" , "24" ]

&gt; $x("//table/tbody/tr/td[position() mod 3 = 2]/text()")
[ "12" , "15" , "22" , "25" ]

```


##結語


以上是很簡單的幾個例子

除了使用jquery以外,python也有提供xpath的library

例如lxml

可參考以下這篇

http://lxml.de/xpathxslt.html
</table></table>
]]></content>
  </entry>
  
</feed>
