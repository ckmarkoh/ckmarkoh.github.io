<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Operator | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/operator/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2016-12-11T00:59:58+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python -- Functional Programming Style 2]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/20/python-functional-programming-style-2/"/>
    <updated>2014-03-20T13:35:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/20/python-functional-programming-style-2</id>
    <content type="html"><![CDATA[<p>用Functional Programming style來寫程式的時候</p>

<p>可以大幅減少行數和變數的數量</p>

<p>本文接續上一篇:/blog/2014/03/18/python-functional-programming-style-1</p>

<p>繼續探討這種Functional Programming style在python中的應用</p>

<h2 id="operator">1. operator</h2>

<p>首先,載入 <code>operator</code> 這個模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import operator</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>然後,來介紹到底要怎麼使用</p>

<!--more-->

<h4 id="operatoradd-operatormultiply-etc">1.1, operator.add, operator.multiply, etc</h4>

<p><code>operator</code> 是一個提供加減乘除之類運算的module,</p>

<p>有的時候不太方便直接用到 <code>+</code> , <code>-</code> 這些符號,</p>

<p>這時候就要用到 <code>operator</code> 這個模組了</p>

<p>如果要求一個list中所有元素的總和,如果不會functional programming style</p>

<p>最基本的寫法,用for迴圈寫,如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>s=0
for i in [3,5,7,9,11]:
…     s += i </p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print s
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣要寫很多行</p>

<p>可以用lambda function簡化</p>

<p>```python </p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(lambda a,b:a+b,[3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>但其實可以連lambda function都不用寫</p>

<p>因為python就已經有內建好這些function</p>

<p>我們可以用 <code>operator.add</code> 搭配 <code>reduce</code> 就可以了</p>

<p>```python </p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(operator.add,[3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這就是 <code>operator</code> 的用法,可以把＋,-,之類的operator運算當成function來使用</p>

<p>事實上,根本什麼都不用寫,用內建的function <code>sum()</code> 就可以了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sum([3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>本文是為了教Functional Programming style舉出operator和reduce搭配使用</p>

<p>讓讀者懂得如何用這些功能</p>

<p>再舉一例,如果有兩向量<script type="math/tex">V_{1},V_{2}</script> </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>V1 = [2,3,4]
V2 = [5,-2,3]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>求兩向量內積 <script type="math/tex">v_{11}v_{21}+v_{12}v_{22}+v_{13}v_{23}</script></p>

<p>可以用 <code>operator.add</code> 和 <code>operator.mul</code> ,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(operator.add,map(operator.mul, V1,V2))
16</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h4 id="operatoritemgetter">1.2 operator.itemgetter</h4>

<p>在運算符號中, <code>operator.itemgetter</code> 相對於運算符號的 <code>[]</code>, </p>

<p>可以取出list 或dict 中的element</p>

<p>但有些情形 <code>operator.itemgetter</code> 會比較方便</p>

<p>給定一個list</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list = [1,2,1,3,4,6]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>假如要取出某個list中index為1者</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.itemgetter(1)(my_list)
2</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣還是直接用 <code>[]</code> 比較快</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list[1]
2</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>但是如果要取出index為1,3,5的三個element</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list[1],my_list[3],my_list[5]
(2, 3, 6)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣有點麻煩了,來用 <code>operator.itemgetter</code> 看看</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.itemgetter(1,3,5)(my_list)
(2, 3, 6)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用, <code>operator.itemgetter</code> 就比較快了</p>

<p>至於還有哪些情況會用到 <code>operator.itemgetter</code> ?</p>

<p>例如在計算語言學的研究中,用freqdist計算每個單字在文章中出現的頻率,</p>

<p>如下, <em>is</em> 出現了193次,之類的</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>freqdist=[(‘a’, 185), (‘is’, 93), (‘the’, 219), (‘he’,51)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要取出每個單字的出現頻率,可以用 <code>itemgetter</code> 搭配 <code>map</code> 使用</p>

<p>如果把單字依出現頻率高低排序,可以用 <code>itemgetter</code> 搭配 <code>sorted</code> 使用</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>map(operator.itemgetter(1),freqdist)
[185, 93, 219, 51]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sorted(freqdist, key=operator.itemgetter(1),reverse=True)
[(‘the’, 219), (‘a’, 185), (‘is’, 93), (‘he’, 51)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h4 id="operatormethodcaller">1.3 operator.methodcaller</h4>

<p>如果遇到一種情況,要根據某個variable的值,來判斷要call哪個function</p>

<p>假設有個class有兩個function,如下:</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>class CallerDemo():
…     def print_a(self):
…         print ‘a’
…     def print_b(self):
…         print ‘b’
… </p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>然後根據variable <code>x</code> 來判斷要call <code>print_a()</code> or <code>print_b()</code> </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def my_print(x):
…     if x == ‘a’:
…         CallerDemo().print_a()
…     elif x == ‘b’:
…         CallerDemo().print_b()
… </p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_print(‘a’)
a</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_print(‘b’)
b</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣寫真的頗麻煩的,</p>

<p>這個時候可以用 <code>operator.methodcaller</code>, 根據字串名稱,選擇要call哪個function</p>

<p>例如:</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>{‘1’:11,’2’:22}.keys()
[‘1’, ‘2’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.methodcaller(‘keys’)({‘1’:11,’2’:22})
[‘1’, ‘2’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用了 <code>operator.methodcaller</code> ,改寫之前的 <code>my_print(x)</code> ,一行就夠了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def my_caller_print(x):
…     operator.methodcaller(“print_%s”%(x))(CallerDemo())</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_caller_print(‘a’)
a</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_caller_print(‘b’)
b</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="functoolspartial">2 functools.partial</h2>

<p>functools 是一些針對higher-order function的一個模組</p>

<p>這些higher-order function可以把其他function當成argument</p>

<p>先載入一下模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import functools</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>我們先來介紹一下 <code>functools.partial</code> 的功能</p>

<p>假設現在要保留某個list之中等於1的element,</p>

<p>可以用到先前提到的 <code>operator</code> 模組,的 <code>operator.eq(a,b)</code> 來比較大小</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>x=1
operator.eq(1,x)
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要搭配 <code>filter</code> 使用,來去掉list中不等於1的element,該怎麼辦呢？</p>

<p>因為 <code>operator.eq(a,b)</code> 需要兩個argument, </p>

<p>但 <code>filter</code> 只能接受一個function與另一個argument</p>

<p>如果要輸入 <code>eq(a,b)</code> 所需要的兩個argument,會出現error,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>filter(operator.eq,1,[1,2,3,1,1,2,2,1,3])
Traceback (most recent call last):
  File “<stdin>", line 1, in <module>
TypeError: filter expected 2 arguments, got 3</module></stdin></p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這個時候,就需要用到 <code>functools.partial</code> 了</p>

<p>它可以先把 <code>operator.eq(a,b)</code> 先和其中一個argument做結合,包成一個function</p>

<p>使用方法如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1=functools.partial(operator.eq,1)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣產生出來的function, <code>eq1</code> 就只需要一個argument了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1(1)
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1(2)
False</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>

    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也就是說,可以把它放到 <code>filter</code> 裡面使用了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>filter(eq1,[1,2,3,1,1,2,2,1,3])
[1, 1, 1, 1]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再舉一個例子,</p>

<p>如果要十六進位的數轉成十進位,可以用 <code>int()</code> 這個function</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>int(“ABCDEF”,base = 16)
11259375</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>int(“AAAAAA”,base = 16)
11184810</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣每次都要輸入兩個argument,而且第二個argument要一直重複輸入,比較麻煩</p>

<p>可以用 <code>functool.partial</code> 先把int和第二個argument包成一個,如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>base16 = functools.partial(int, base=16)
base16(“ABCDEF”)
11259375</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>base16(“AAAAAA”)
11184810</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣子看起來就簡潔多了</p>

<h2 id="further-reading">Further Reading:</h2>

<p>其實 <code>functool</code> 還有一個很好用的function: <code>functool.wraps</code></p>

<p>但這個跟 <em>Design Pattern</em> 的 <em>decorator</em> 有關</p>

<p>等之後有機會提到 <em>Design Pattern</em> 的時候再來講解</p>

<p>關於本文所講到的,想知道更多,請看：</p>

<p>operator: http://docs.python.org/2/library/operator.html</p>

<p>functools: http://docs.python.org/2/library/functools.html</p>
]]></content>
  </entry>
  
</feed>
