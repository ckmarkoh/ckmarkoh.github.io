<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chunking | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/chunking/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2016-12-11T00:46:52+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Nltk -- Rule-Based Chunking]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/05/06/python-nltk-rule-based-chunking/"/>
    <updated>2014-05-06T14:46:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/05/06/python-nltk-rule-based-chunking</id>
    <content type="html"><![CDATA[<h2 id="chunking">Chunking</h2>

<p>分析句子的成份, 當句子不符合文法時, 使用 <em>Context-Free Grammar</em> 去做 <em>Parsing</em> , 可能會得不出結果, 而某些應用, 需要的並不是完整的剖析樹, 而是把句子中某些成份給找出來</p>

<p><em>Chunking</em> 的概念就是, 把句子中的單字分組, 每一組是由一到多個相鄰的單字所組成, 例如, 想要得出句子中有哪些名詞片語, 就可以把相鄰的定冠詞, 名詞修飾語, 以及名詞, 分成一組, 分組所得出的即為名詞片語</p>

<p>舉個例子, 在以下的句子中, 想要找出名詞片語有哪些</p>

<script type="math/tex; mode=display">

\text{The little yellow dog barked at the cat}.

</script>

<p>首先, 對這個句子進行 <em>Part of speech Tagging</em></p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{array}{c}

&\text{The} &\text{little} &\text{yellow} &\text{dog} &\text{barked} &\text{at} &\text{the} &\text{cat} \\

&\text{DT} &\text{JJ} &\text{JJ} &\text{NN} &\text{VBD} &\text{IN} &\text{DT} &\text{NN} 

\end{array}

 %]]&gt;</script>

<!--more-->

<p><em>Part of speech Tagging</em> 完之後可得出這些單字, 就可以根據這些單字的 <em>Tag</em> 來決定要怎麼分組, 如果要找名詞片語, 可以把相鄰的 <em>DT</em> , <em>JJ</em> 和 <em>NN</em> 分到名詞片語 <em>NP</em> 的組別中 , 如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{bmatrix}

 &\text{The} &\text{little} &\text{yellow} &\text{dog} \\

 &\text{DT} &\text{JJ} &\text{JJ} &\text{NN} \\

 &\mathbf{NP}

\end{bmatrix}\mspace{10mu}

\begin{array}{c}

 &\text{barked} &\text{at} \\

 &\text{VBD} &\text{IN} \\

 &

\end{array}\mspace{20mu}

\begin{bmatrix}

 &\text{the} &\text{cat} \\

 &\text{DT} &\text{NN} \\

 &\mathbf{NP}

\end{bmatrix}

 %]]&gt;</script>

<p>根據以上結果得出, 名詞片語有 <em>The little yellow dog</em> 和 <em>the cat</em></p>

<p><em>Chunking</em> 的演算法, 主要有兩種, 一種是 <em>Rule-Based</em>, 另一種是 <em>Machine-Learning-Based</em> , 本文的重點放在前者</p>

<h2 id="rule-based-chunking">Rule-Based Chunking</h2>

<p><em>Rule-Based Chunking</em> 是根據事先定好的 <em>Rule</em> 來進行 <em>Chunking</em>, 例如以上例子, 定義好名詞片語的成份有哪些, 來尋找句子中哪些單字可以組成名詞片語</p>

<p>在 <em>python nltk</em> 裡, 可以用 <code>RegexpParser</code> 以 <em>regular expression</em> 來定義這些 <em>rule</em></p>

<p>首先, 載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk import RegexpParser</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>以及例句</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sentence = [(“the”, “DT”), (“little”, “JJ”), (“yellow”, “JJ”), (“dog”, “NN”) \ 
…            ,(“barked”, “VBD”), (“at”, “IN”),  (“the”, “DT”), (“cat”, “NN”)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用 <em>Regular Expression</em> 定義好 <em>NP</em> 的 <em>Rule</em></p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>grammar = “NP: {&lt;DT&gt;?<jj>*<nn>}"</nn></jj></p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>以上的 <em>rule</em> 表示, <em>NP</em> 是由 <em>0~1</em> 個 <em>DT</em> , <em>0</em> 個以上的 <em>JJ</em> 和 一個 <em>NN</em> 所組成的 </p>

<p>再來用 <code>RegexpParser</code> 進行 <em>Chunking</em>, 得出以下結果</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result = RegexpParser(grammar).parse(sentence)
print result
(S
  (NP the/DT little/JJ yellow/JJ dog/NN)
  barked/VBD
  at/IN
  (NP the/DT cat/NN))</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也可以把結果畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="/images/pic/pic_00073.png" alt="ch1" /></p>

<p>如上圖顯示, <em>Chunking</em> 的結果, 把屬於 <em>NP</em> 的元素都歸到 <em>NP</em> 底下了</p>

<h2 id="chinking">Chinking</h2>

<p>前文所提到的 <em>Chunking</em> 是先定義好, 哪個類別 <em>有</em> 哪些元素</p>

<p>但有時候, 想要的取得的類別, 要一一列舉其中的元素, 列舉不完, 如果要用消去法的概念, 來定義哪些元素不包含在這個類別裡面, 就方便多了</p>

<p>而 <em>Chinking</em> 的概念是用消去法, 定義哪個類別 <strong>沒有</strong> 哪些元素, 把那些沒有的元素排除, 而剩下來的就被分到該類別</p>

<p>例如可以定義, <em>NP</em> 沒有 <em>VBD</em> 或 <em>IN</em> 這兩者, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>grammar2 = r”””
…   NP:
…     {&lt;.*&gt;+}          # Chunk everything
…     }&lt;VBD|IN&gt;+{      # Chink sequences of VBD and IN
…   “””</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>其中, <code>{&lt;.*&gt;+}</code> 是先把所有東西都包含進去, 再來的 <code>}&lt;VBD|IN&gt;+{ </code> 是用 <em>Chinking</em> 把 <em>VBD</em> 和 <em>IN</em> 這兩者排除, 執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result = RegexpParser(grammar2).parse(sentence)
print result
(S
  (NP the/DT little/JJ yellow/JJ dog/NN)
  barked/VBD
  at/IN
  (NP the/DT cat/NN))</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>把結果畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="/images/pic/pic_00073.png" alt="ch1" /></p>

<p>得出結果和前文的 <em>Chunking</em> 相同</p>

<h1 id="further-reading">Further Reading</h1>

<p>本文是對 <em>Rule-Based Chunking</em> 很簡單的介紹</p>

<p>想要更深入了解, 請看</p>

<p>Python nltk Documentation Chunking</p>

<p>http://nltk.googlecode.com/svn/trunk/doc/book/ch07.html#fig-chunk-segmentation</p>

<p>Python nltk HOWTO chunk</p>

<p>http://www.nltk.org/howto/chunk.html</p>
]]></content>
  </entry>
  
</feed>
