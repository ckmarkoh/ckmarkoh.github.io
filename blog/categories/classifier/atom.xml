<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Classifier | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/classifier/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2016-12-11T01:19:47+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自然語言處理 -- Log-Linear Model]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/04/28/natural-language-processing-log-linear-model/"/>
    <updated>2014-04-28T11:00:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/04/28/natural-language-processing-log-linear-model</id>
    <content type="html"><![CDATA[<h2 id="introduction">1. Introduction</h2>

<p>在機器學習中有一種用於分類的演算法, 叫作 <em>Logistic Regression</em> , 可以把東西分成兩類</p>

<p>而在自然語言處理的應用, 常常需要處理多類別的分類問題, 像是 <em>Part of speech Tagging</em> 就是把一個字詞分類到名詞, 動詞, 形容詞, 之類的問題</p>

<p>如果二元分類的 <em>Logistic Regression</em> , 推廣到多種類別分類, 就可以處理這種分類問題</p>

<p>首先, 把二元分類的 <em>Logistic Regression</em> 公式, 稍做調整, 如下  </p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&p(y=true|X) = \frac{1}{1+e^{-W \cdot X }} 

= \frac{ e^{\frac{W \cdot X}{2}} }{ e^{\frac{W \cdot X}{2}}+e^{\frac{-W \cdot X}{2}}  } \\[12pt]

&p(y=false|X) = \frac{e^{-W \cdot X }}{1+e^{-W \cdot X }} 

= \frac{ e^{\frac{-W \cdot X}{2}} }{ e^{\frac{W \cdot X}{2}}+e^{\frac{-W \cdot X}{2}}  } \\

\end{align}

 %]]&gt;</script>

<p>針對多類別的  <em>Logistic Regression</em> , 叫作 <em>Multinomial logistic regression</em> , 如果總共有 <script type="math/tex">k</script> 的類別, 每個類別的 <em>label</em> 為 <script type="math/tex">c_{i} , i \in k </script> , 則公式如下</p>

<!--more-->

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&p(y=c_{1}|X) = \frac{ e^{W_{c_{1}} \cdot X} }{ \sum_{i=1}^{k} e^{W_{c_{i}} \cdot X} } \\[12pt]

&p(y=c_{2}|X) = \frac{ e^{W_{c_{2}} \cdot X} }{ \sum_{i=1}^{k} e^{W_{c_{i}} \cdot X} } \\[12pt]

&...\\[12pt]

&p(y=c_{k}|X) = \frac{ e^{W_{c_{k}} \cdot X} }{ \sum_{i=1}^{k} e^{W_{c_{i}} \cdot X} } \\


\end{align}

 %]]&gt;</script>

<p>在自然語言處理中, 由於 <em>feature value</em> , 也就是 <script type="math/tex">X</script> , 通常不是數字, 例如 <em>前面幾個字的 Tag</em> 之類的, 這時就要用 <em>feature function</em> 把 <em>feature value</em> 轉成數字</p>

<p>所謂的 <em>feature function</em> , 就像是一個檢查器, 去檢查 <em>input data</em> 是否滿足某個 <em>feature</em> , 滿足的話則輸出 <em>1</em> , 不滿足者輸出 <em>0</em> , 以下為一個<em>feature function</em> 的例子</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


f_{j}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} tag_{i-1} = VB \mspace{15mu}\text{and} \mspace{15mu} c=NN \\

0 & \text{otherwise}

\end{cases}

 %]]&gt;</script>

<p>其中 , <script type="math/tex">tag_{i-1}</script> 是前一個字的 <em>Tag</em> , 而 <script type="math/tex">c</script> 為這個字的類別, 如果這個字的類別是 <script type="math/tex">NN</script> , 且前一個字的 <em>Tag</em> 為 <script type="math/tex">VB</script> , 則 <script type="math/tex">f_{j}=1</script> , 若不滿足這些條件, 則 <script type="math/tex">f_{j}=0</script></p>

<p>加入 <em>feature function</em> 以後 , 原本的 <script type="math/tex">W_{c_{i}} \cdot X</script> 變為  <script type="math/tex">\sum_{i=0}^{N}w_{c_{i}}f_{i}(c,x)</script> ,  <em>Multinomial logistic regression</em> 的公式變為這樣, 也就是所謂的 <em>Log-Linear Model</em></p>

<script type="math/tex; mode=display">

p(y=c_{i}|X) = \frac{ e^{ \sum_{i=0}^{N}w_{c_{i}}f_{i}(c,x) } }{ \sum_{j=1}^{k} e^{\sum_{j=0}^{N}w_{c_{j}}f_{j}(c,x)} } \\[12pt]

</script>

<p>再來, 要怎麼訓練這個 <em>Model</em> 呢？</p>

<p><em>Training</em> 是一個求最佳解的過程, 要找到一組 <em>Weight</em> 可以使得 <script type="math/tex">\sum_{i}p(Y^{(i)} \mid X^{(i)})</script> 為最大值, 公式為</p>

<script type="math/tex; mode=display">

\mathop{\arg\,\max}\limits_{w} \sum_{i} p(Y^{(i)} \mid X^{(i)})  


</script>

<p>由於有時 <em>feature function</em> 的數量會太多, 容易導致 <em>Overfitting</em> , 為了避免此現象, 所以會減掉 <script type="math/tex">\alpha R(w)</script> 以進行 <em>Regularization</em></p>

<script type="math/tex; mode=display">

\mathop{\arg\,\max}\limits_{w} \sum_{i} p(Y^{(i)} \mid X^{(i)})  -\alpha R(w)


</script>

<p>另外, 由於此最佳化後產生的結果, 會有最大的 <em>Entropy</em> , 故 <em>Log-Linear Model</em> 又稱為 <em>Maxmum Entropy Model</em> , 在此做不推導, 欲知詳情請看 <em>Berger et al. (1996). A maximum entropy approach to natural language processing.</em></p>

<h2 id="example">2. Example</h2>

<p>舉個例子, 如何用 <em>feature function</em> 算出 <em>Tagging</em> 的機率值</p>

<p>假設現在要對以下句子進行 <em>Part of Speech Tagging</em> , 現在已經進行到了 <strong><em>race</em></strong> 這個字</p>

<script type="math/tex; mode=display">

\text{Secretariat/}NNP \text{ is/}BEZ \text{ expected/}VBN \text{ to/}TO \text{ race/}\textbf{??} \text{ tomorrow/} 

</script>

<p>總共用了以下六種 <em>feature function</em> </p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&f_{1}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} word_{i} = \text{'race'} \mspace{15mu}\text{and} \mspace{15mu} c=NN \\

0 & \text{otherwise} 

\end{cases} \\[12pt]


&f_{2}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} tag_{i-1} = TO \mspace{15mu}\text{and} \mspace{15mu} c=VB \\

0 & \text{otherwise} 

\end{cases} \\[12pt]


&f_{3}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} suffix(word_{i}) = \text{'ing'} \mspace{15mu}\text{and} \mspace{15mu} c=VBG \\

0 & \text{otherwise} 

\end{cases} \\[12pt]


&f_{4}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} isLowerCase(word_{i}) \mspace{15mu}\text{and} \mspace{15mu} c=VB \\

0 & \text{otherwise} 

\end{cases} \\[12pt]


&f_{5}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} word_{i} = \text{'race'} \mspace{15mu}\text{and} \mspace{15mu} c=VB \\

0 & \text{otherwise} 

\end{cases} \\[12pt]


&f_{6}(c,x) =

\begin{cases} 

1 & \text{if}\mspace{15mu} tag_{i-1} = TO \mspace{15mu}\text{and} \mspace{15mu} c=NN \\

0 & \text{otherwise} 

\end{cases} 

\end{align}

 %]]&gt;</script>

<p>現在要求 <strong><em>race</em></strong> 這個字的 <em>Tag</em> 是 <em>NN</em> 還是 <em>VB</em> , 代入以上六個 <em>feature function</em> , 得出結</p>

<p>果於下表</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


    \begin{array}{|c|c|} 

    \hline

		   &   & f1 & f2 & f3 & f4 & f5 & f6 \\ \hline

    VB & f & 0  & 1  & 0  & 1  & 1  & 0  \\ \hline

    VB & w & 0  & 0.8& 0  &0.01& 0.1& 0  \\ \hline

    NN & f & 1  & 0  & 0  & 0  & 0  & 1  \\ \hline

    NN & w &0.8 & 0  & 0  & 0  & 0  &-1.3  \\ \hline

		\end{array}

 %]]&gt;</script>

<p>其中 <script type="math/tex">f</script> 是 <em>feature function</em> 算出來的值, <script type="math/tex">w</script> 是 <em>weight</em> , 這個值通常是針對 <em>Training Data</em> 做最佳化得出來的值, <em>weight</em> 越大則表示 <em>feature</em> 所占的比重越重</p>

<p>接著把 <script type="math/tex">w_{i}f_{i}(c,x)</script> 的值帶入公式</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(NN \mid x) = \frac{e^{0.8+(-1.3)}}{e^{0.8+(-1.3)}+e^{0.8+0.01+0.1}} = 0.2 \\[12pt]

&P(VB \mid x) = \frac{e^{0.8+0.01+0.1}}{e^{0.8+(-1.3)}+e^{0.8+0.01+0.1}} = 0.8 \\

\end{align}

 %]]&gt;</script>

<p>算出結果 <script type="math/tex">0.8>0.2</script> , 所以 <strong><em>race</em></strong> 的 <em>Tag</em> 為 <em>VB</em></p>

<h2 id="implementation">3. Implementation</h2>

<p>接著來實作用 <em>Log-Linear Mode</em> 進行 <em>Part of Speech Tagging</em></p>

<p>這次要用 <em>python nltk</em>  的 <code>MaxentClassifier</code> 來實作</p>

<p>首先, 開一個新的檔案 <em>loglinear.py</em> 貼上以下程式碼</p>

<p>```python loglinear.py
import nltk
import operator</p>

<p>class LogLinearTagger(nltk.TaggerI):</p>

<pre><code>def __init__(self,training_corpus):
    self.classifier = None
    self.training_corpus = training_corpus

def train(self):
    self.classifier = nltk.MaxentClassifier.train(
                reduce(operator.add, 
                    map(lambda tagged_sent :
                        self.sent_to_feature(tagged_sent)
                        ,self.training_corpus)),algorithm='megam' )

def sent_to_feature(self,tagged_sent):
    return  map(lambda (i, elem) : 
                    apply( lambda token , tag : 
                         (self.extract_features(token, i, tag), elem[1])
                        ,zip(*tagged_sent))
                    ,enumerate(tagged_sent))

def tag_sentence(self, sentence_tag):
    if self.classifier == None:
        self.train()
    return apply (lambda sentence : 
                zip(sentence,
                reduce(lambda x,y:  
                    apply(operator.add,
                        [x,[self.classifier.classify(self.extract_features(sentence, y[0], x))]])
                    , enumerate(sentence), []))
                ,[map(operator.itemgetter(0),sentence_tag)])

def evaluate(self,test_sents):
    return apply(lambda result_list : 
                sum(result_list)/float(len(result_list))
                , [reduce(operator.add,
                    map(lambda line:
                        map(lambda tag : int(tag[0] == tag[1])
                            , zip(map(operator.itemgetter(1),line),
                                  map(operator.itemgetter(1),self.tag_sentence(line))))
                       ,test_sents))])

def extract_features(self, sentence, i, history):
    features = {}
    features["this-word"] =  sentence[i]
    if i == 0:
        features["prev-tag"] = "&lt;START&gt;"
    else:
        features["prev-tag"] = history[i-1]
    return features     
</code></pre>

<p>```</p>

<p>其中, <code>extract_features</code> 是用於把 <em>input sentence</em> 的 <em>feature</em> 取出來,  例如這次用到的 <em>feature</em> 有目前這個字是什麼 <code>"this-word"</code> ,和前一個字的 <em>Tag</em> 是什麼 <code>"prev-tag"</code> </p>

<p>取出 <em>feature</em> 後 , <code>MaxentClassifier</code> 會自動根據這些 <em>feature</em> 產生 <em>feature function</em> </p>

<p>接下來到 <em>python</em> 的 <em>interactive mode</em> 載入檔案</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from loglinear import LogLinearTagger</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這次要用 <em>brown corpus</em> 的 <em>category</em> , <code>news</code> 的前 <em>100</em> 句來當作 <em>Tranining Data</em> ,第 <em>100~200</em> 句當作 <em>Test Data</em> , 先輸入以下程式碼</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk.corpus import brown
brown_tagged_sents = brown.tagged_sents(categories=’news’)
train_sents = brown_tagged_sents[:100]
test_sents = brown_tagged_sents[100:200]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著用 <em>Training Data</em> 建立一個 <em>LogLinearTagger</em> 的 <em>class</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>classifier = LogLinearTagger(train_sents)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>在開始訓練之前, 我們先挑其中的一句, 看一下格式, 是已經 <em>Tag</em> 好的句子 , 我們以 <code>train_sents[31]</code> 為例</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>train_sents[31]
[(‘His’, ‘PP$’), (‘petition’, ‘NN’), (‘charged’, ‘VBD’), (‘mental’, ‘JJ’), \
(‘cruelty’, ‘NN’), (‘.’, ‘.’)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>看一下這句可以產生出哪些 <em>Feature</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>for x in classifier.sent_to_feature(train_sents[31]):
…     print x
… 
({‘prev-tag’: ‘<start>', 'this-word': 'His'}, 'PP$')
({'prev-tag': 'PP$', 'this-word': 'petition'}, 'NN')
({'prev-tag': 'NN', 'this-word': 'charged'}, 'VBD')
({'prev-tag': 'VBD', 'this-word': 'mental'}, 'JJ')
({'prev-tag': 'JJ', 'this-word': 'cruelty'}, 'NN')
({'prev-tag': 'NN', 'this-word': '.'}, '.')</start></p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>例如第一個字, <code>'His'</code> , 它的 <em>feature</em> 有 <code>'prev-tag': '&lt;START&gt;'</code> 和 <code>'this-word': 'His'</code> , <em>Tag</em> 的結果為 </p>

<p><code>'PP$'</code> , 由於第一個字前面已經沒有字了, 也沒有 <em>Tag</em> 了, 所以我們用 <code>&lt;START&gt;</code> 來表示</p>

<p>再來就是要訓練 <em>classifier</em>, 執行 <code>classifier.train()</code> 就可以開始訓練, 但要花一點時間</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>classifier.train()
Scanning file…2268 train, 0 dev, 0 test, reading…done
optimizing with lambda = 0
it 1   dw 5.348e-01 pp 4.19728e+00 er 0.79850
it 2   dw 3.179e+00 pp 3.32097e+00 er 0.82760
it 3   dw 1.037e+00 pp 2.92326e+00 er 0.67549
it 4   dw 9.602e-01 pp 2.72106e+00 er 0.63933
it 5   dw 1.345e+00 pp 2.41257e+00 er 0.54012
it 6   dw 1.378e+00 pp 2.16177e+00 er 0.46429
……</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果出現以下錯誤訊息, 表示你沒安裝 <em>megan</em></p>

<p>```python
    raise LookupError(‘\n\n%s\n%s\n%s’ % (div, msg, div))
LookupError: </p>

<p>===========================================================================
NLTK was unable to find the megam file!
Use software specific configuration paramaters or set the MEGAM environment variable.</p>

<p>For more information, on megam, see:
    <a href="http://www.cs.utah.edu/~hal/megam/">http://www.cs.utah.edu/~hal/megam/</a>
===========================================================================</p>

<p>```</p>

<p>請到 http://www.umiacs.umd.edu/~hal/megam/version0_91/ 下載 <em>megan</em></p>

<p>如果你是 <em>linux</em> 的使用者, 可直接下載執行檔, 放到 <code>/home/xxxxxx/bin/</code> 資料夾 ( 若你是使用 <em>Mac</em> 或 <em>Window$</em> , 則需要下載 <em>source code</em> 自行編譯</p>

<p>或者你可以把 <em>loglinear.py</em> 中的 <code>MaxentClassifier</code> 的 ` algorithm=’megam’ ` 去掉 , 變成這樣</p>

<p>```python loglinear.py
        self.classifier = nltk.MaxentClassifier.train(
                    reduce(operator.add, 
                        map(lambda tagged_sent :
                            self.sent_to_feature(tagged_sent)
                            ,self.training_corpus)) )</p>

<p>```</p>

<p>但這會導致訓練速度變得很慢</p>

<p>訓練好之後, 可以用 <em>Test Data</em> 看看結果如何 , 先挑一句, 以 <code>test_sents[10]</code> 為例</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>test_sents[10]
[(‘<code>', '</code>’), (‘You’, ‘PPSS’), (‘take’, ‘VB’), (‘out’, ‘RP’), (‘of’, ‘IN’), \
(‘circulation’, ‘NN’), (‘many’, ‘AP’), (‘millions’, ‘NNS’), (‘of’, ‘IN’), \
(‘dollars’, ‘NNS’), (“’’”, “’’”), (‘.’, ‘.’)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>把這個句子放到訓練好的 <code>classifier</code> , 用它來 <em>Tag</em> , 比較一下跟原本的 <em>tag</em> 有何不同 </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>classifier.tag_sentence(test_sents[10])
[(‘<code>', '</code>’), (‘You’, ‘VB’), (‘take’, ‘VB’), (‘out’, ‘RP’), (‘of’, ‘IN’), \
(‘circulation’, ‘JJ’), (‘many’, ‘AP’), (‘millions’, ‘NNS’), (‘of’, ‘IN’), \
(‘dollars’, ‘JJ’), (“’’”, “’’”), (‘.’, ‘.’)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>先用肉眼觀察, 我們發現 <code>classifier</code> 所得出的 <em>Tag</em> 有些和原本的一樣, 有些不一樣, 表示 <code>classifier</code> 有些字 <em>Tag</em> 錯了</p>

<p>可以用程式來算準確率, 用 <code>classifier.evaluate</code> ,  但注意的是, <em>input argument</em> 不是 <em>sentence</em> , 而是 <em>list of sentence</em> , 所以 <em>input argument</em> 要用 <code>[test_sents[10]]</code> , 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>classifier.evaluate([test_sents[10]])
0.75</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>算出來後準確度是 <em>0.75</em> , 也就是說有 <em>75%</em> 的 <em>Tag</em> 是正確的</p>

<p>再來把所有的 <em>Test Data</em> 都做 <em>Evaluation</em> 看看</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>classifier.evaluate(test_sents)
0.6910327241818954</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>得的準確率約為 <em>69.1%</em></p>

<p>這樣的準確率不是很理想, 原因是因為 <em>100</em> 句的 <em>Training Data</em> 實在是太少了</p>

<p>有興趣者可以試試看, 取 <em>2000</em> 句的 <em>Training Data</em> , 準確度應該會大幅提昇, 但是要花很久的時間訓練</p>

<h2 id="furtuer-reading">3. Furtuer Reading</h2>

<p>本文參考至這本教科書</p>

<p><a href="http://www.amazon.com/Speech-Language-Processing-2nd-Edition/dp/0131873210">Speech and Language Processing</a></p>

<p>以及台大資工系 陳信希教授的 自然語言處理 課程講義</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自然語言處理 -- Naive Bayes Classifier]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/04/13/natural-language-processing-naive-bayes-classifier/"/>
    <updated>2014-04-13T07:04:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/04/13/natural-language-processing-naive-bayes-classifier</id>
    <content type="html"><![CDATA[<h2 id="introduction">1.Introduction</h2>

<p>在自然語言處理的應用, 常常有分類的問題, 例如把某篇新聞分到哪一類</p>

<p>處理分類問題, 有種簡單的方法, 就是看這篇文章有哪些關鍵字, 根據這些關鍵字的出現與否, 用 <em>Naive Bayes Classifier</em> 做分類</p>

<p>要講 <em>Naive Bayes Classifier</em> 之前, 首先, 要知道 <em>Bayes rule</em> 是什麼, <em>Bayes rule</em> 很簡單, 如下</p>

<script type="math/tex; mode=display">

P(A,B)=P(A\mid B) \times P(B) = P(B\mid A) \times P(A)

</script>

<p>這個公式, 高中數學應該都有教過 , 如果 <script type="math/tex">A</script> 和 <script type="math/tex">B</script> 為 <em>Independence</em> , 則</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(A\mid B) = P(A) \\

&P(A,B)=P(A\mid B) \times P(B) = P(A) \times P(B)

\end{align}

 %]]&gt;</script>

<p>所謂的 <em>Naive Bayes Classifier</em>  ,  其實就是應用 <em>Bayes rule</em>  來處理分類問題</p>

<!--more-->

<p>舉個例子, 文章分類問題, 如果有一篇文章有關鍵字有 <script type="math/tex">W_{1} , W_{2}</script> ,假設 <script type="math/tex">P(W_{1})</script>  和 <script type="math/tex">P(W_{2})</script> 為 <em>Independence</em> , 這篇文章被分到類別 <script type="math/tex">C</script> 的機率</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(C,W_{1},W_{2}) \\

&=P(C \mid W_{1},W_{2}) \times P(W_{1},W_{2})  &(Bayes Rule) \\

&= P(W_{1},W_{2}\mid C ) \times P(c) &(Bayes Rule) \\ 

&= P(W_{1}\mid W_{2}, C) \times P(W_{2} \mid C)  \times P(c ) &(Bayes Rule) \\

&= P(W_{1}\mid C ) \times P(W_{2} \mid C )  \times P(C )  & (Independence)

\end{align}

 %]]&gt;</script>

<p>如果某篇文章有關建字 <script type="math/tex">W_{1}</script> , 但沒有關鍵字 <script type="math/tex">W_{2}</script> , 這篇文章被分到類別 <script type="math/tex">C</script> 的機率,如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(C , W_{1} ,  W_{2}')  \\

&= P(W_{1}  \mid C ) \times P( W_{2}'  \mid C)  \times P( C) \\

&= P(W_{1}  \mid C ) \times (1- P( W_{2}  \mid C))  \times P( C)

\end{align}

 %]]&gt;</script>

<p>其中, 沒有關鍵字 <script type="math/tex">W_{2}</script> 字的機率, 取有關鍵字 <script type="math/tex">W_{2}</script> 的機率的補集,  <script type="math/tex">P( W_{2}'  \mid C)= 1- P( W_{2}  \mid C )</script></p>

<p>如果所挑選的關鍵字超過兩個以上, 某篇文章有關鍵字 <script type="math/tex">W_{1} , W_{2},...,W_{k}</script> , 但沒有關鍵字 <script type="math/tex">V_{1},V_{2},...,V_{l}  </script> 則此文章被分到類別 <script type="math/tex">C</script> 的機率如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(C,W_{1},W_{2},...,W_{k}, V_{1}' , V_{2}' , ..., V_{l}' ) \\

&= \prod_{i=1}^{k} P(W_{i}\mid C ) \times \prod_{j=1}^{l} (1-P(V_{j}\mid C )) \times P(C )  

\end{align}

 %]]&gt;</script>

<p>來分析一下以上公式的物理意義</p>

<p>| 成份 | 物理意義   |
|:——————–|:—————————————————————————-|
\mid  <script type="math/tex">P(C )</script>           \mid  在所有的文章中,  類別 <script type="math/tex">C</script> 所占的比例, 若比例越高, 就表示文章越有可能屬於此類別 \mid 
\mid  <script type="math/tex">P(W_{i}\mid C )</script> \mid  若某文章的類別是 <script type="math/tex">C</script> , 則此文章有關鍵字 <script type="math/tex">W_{i}</script> 的機率              \mid 
\mid  <script type="math/tex">1- P(W_{i}\mid C )</script> \mid  若某文章的類別是 <script type="math/tex">C</script> , 則此文章沒有關鍵字 <script type="math/tex">W_{i}</script> 的機率         \mid </p>

<p>所以, 把以上三種全部乘起來, 得到文章和關鍵字的 <em>Joint Probablity</em> , 就可以用關鍵字來預測文章的類別</p>

<h2 id="example--sentiment-analysis">2.Example : Sentiment Analysis</h2>

<p><em>Sentiment Analysis</em> 是一種分類問題, 就是把評論性質的文句, 分類到 <em>正面評論</em> 和 <em>負面評論</em> 這兩類</p>

<p>例如, 在課程的討論版上, 蒐集各種關於某門課的評論句子, 句子的種類如下</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">count</th>
      <th style="text-align: left">sentence</th>
      <th>sentiment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">2000</td>
      <td style="text-align: left">I really <strong>like</strong> this course and I learn a <strong>lot</strong> from it</td>
      <td>+</td>
    </tr>
    <tr>
      <td style="text-align: left">800</td>
      <td style="text-align: left">I <strong>hate</strong> this course and I think it is a <strong>waste</strong> of time</td>
      <td>-</td>
    </tr>
    <tr>
      <td style="text-align: left">200</td>
      <td style="text-align: left">The course is extremely <strong>simple</strong> and quite a <strong>bore</strong></td>
      <td>-</td>
    </tr>
    <tr>
      <td style="text-align: left">3000</td>
      <td style="text-align: left">The course is <strong>simple</strong>, and very <strong>easy</strong> to follow</td>
      <td>+</td>
    </tr>
    <tr>
      <td style="text-align: left">1000</td>
      <td style="text-align: left">I <strong>enjoy</strong> this course a <strong>lot</strong> and learning something too</td>
      <td>+</td>
    </tr>
    <tr>
      <td style="text-align: left">400</td>
      <td style="text-align: left">I would <strong>enjoy</strong> myself a <strong>lot</strong> if i did not have to take this course</td>
      <td>-</td>
    </tr>
    <tr>
      <td style="text-align: left">600</td>
      <td style="text-align: left">I didn’t <strong>enjoy</strong> this course</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<p>其中, 欄位 <em>count</em> 表示這種句子出現的次數, 句子中的粗體字的為 <em>keyword</em> , 欄位 <em>sentiment</em> 表示正評或負評, 正評記為 <em>+</em> , 負評記為 <em>-</em> , 給一個新的評論句子 </p>

<script type="math/tex; mode=display">

 \text{I really } \textbf{like } \text{this } \textbf{simple } \text{course a } \textbf{lot } \text{.}

</script>

<p>這個句子中有關鍵字 <strong>like</strong> , <strong>simple</strong> , <strong>lot</strong> , 但沒有關鍵字 <strong>hate</strong> , <strong>waste</strong> , <strong>bore</strong> , <strong>easy</strong> , <strong>enjoy</strong> , 則這個句子為正面評論的機率為</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(+,like,simple,lot,hate',waste',bore',easy',enjoy') \\

&=P(+) \times P(like \mid  +) \times P(simple \mid  +) \times P(lot \mid  +)  \times (1- P(hate \mid  +)) \\

& \times (1- P(waste \mid  +)) \times (1- P(bore \mid  +)) \times (1- P(easy \mid  +)) \times (1- P(enjoy \mid  +))  

\end{align}

 %]]&gt;</script>

<p>先分別算出這些項目的機率, 再全部乘起來</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

& P(+) =	\frac{2000+3000+1000}{2000+800+200+300+1000+4000+600} = \frac{6000}{8000} = 0.75 \\[10pt]

& P(like \mid  +) =	\frac{2000}{6000}  \approx 0.333333 \\[10pt]

& P(simple \mid  +) =	\frac{3000}{6000}  = 0.5 \\[10pt]

& P(lot \mid  +) =	\frac{2000}{6000}  \approx 0.333333 \\[10pt]

& P(hate \mid +) = \frac{1}{6000} \approx 0.000167 &(smoothing)\\[10pt]

& P(waste \mid +) = \frac{1}{6000} \approx 0.000167 &(smoothing)\\[10pt]

& P(bore \mid +) = \frac{1}{6000} \approx 0.000167 &(smoothing)\\[10pt]

& P(easy \mid +) = \frac{3000}{6000} = 0.5 \\[10pt]

& P(enjoy \mid +) = \frac{1000}{6000} \approx 0.166667 \\[10pt]

\end{align}

 %]]&gt;</script>

<p>其中,  <strong>hate</strong> , <strong>waste</strong> , <strong>bore</strong> , 在 <em>sentiment = ‘+’</em> 時的 <em>count</em> 為 <em>0</em> , 為了避免最後相乘的結果變為 <em>0</em> , 所以要做 <em>smoothing</em> , 也就是說, 將 <em>count</em> 改為 <em>1</em>  </p>

<p>將以上結果乘起來, 得出以下結果</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&P(+,like,simple,lot,hate',waste',bore',easy',enjoy') \\

&= 0.75 \times  0.333333 \times   0.5\times   0.333333 \times   (1-0.000167) \times   (1-0.000167) \times   (1-0.000167)  

\\& \times 0.5 \times    0.166667 \\

& \approx 0.01716

\end{align}

 %]]&gt;</script>

<p>再來算算看這個句子為負面評論的機率, 得出</p>

<script type="math/tex; mode=display">

P(-,like,simple,lot,hate',waste',bore',easy',enjoy') = 4.048 \times 10^{-7} \approx 0

</script>

<p>因為 <script type="math/tex"> 0.026 > 0 </script> , 故此句子較有可能為正面評論</p>

<h2 id="implementation--sentiment-analysis">3.Implementation : Sentiment Analysis</h2>

<p>接著來實作一下以上的例子</p>

<p>首先, 開新檔案命名為 <em>sentiment.py</em> ,貼上以下內容</p>

<p>```python sentiment.py
_DATA = [ 
{‘n’:2000., ‘s’:”I really like this course and I learn a lot from it               “, ‘p’: 1}, 
{‘n’:800. , ‘s’:”I hate this course and I think it is a waste of time              “, ‘p’:-1}, 
{‘n’:200. , ‘s’:”The course is extremely simple and quite a bore                   “, ‘p’:-1}, 
{‘n’:3000., ‘s’:”The course is simple, and very easy to follow                     “, ‘p’: 1}, 
{‘n’:1000., ‘s’:”I enjoy this course a lot and learning something too              “, ‘p’: 1}, 
{‘n’:400. , ‘s’:”I would enjoy myself a lot if i did not have to take this course  “, ‘p’:-1}, 
{‘n’:600. , ‘s’:”I didn’t enjoy this course                                        “, ‘p’:-1}, 
]</p>

<p>_KEYWORD = [‘like’,’lot’,’hate’,’waste’,’simple’,’bore’,’easy’,’enjoy’]</p>

<p>def smooth(x):
    if x==0.:
        return 1.
    else :
        return x</p>

<p>def pc(c):
    return smooth(sum([d[‘n’] for d in _DATA if d[‘p’]==c]))/ \
           smooth(sum([d[‘n’] for d in _DATA]))</p>

<p>def pwc(w,c):
    return smooth(sum([d[‘n’] for d in _DATA if d[‘p’]==c if w in d[’s’] ])) / \ 
           smooth(sum([d[‘n’] for d in _DATA if d[‘p’]==c]))</p>

<p>def psc(s,c):
    return reduce(lambda a,b: a<em>b, 
           map(lambda w : pwc(w,c) if w in s else 1.-pwc(w,c) , _KEYWORD))</em>pc(c) </p>

<p>def sentiment(s):
    if psc(s,1) &gt; psc(s,-1):
       return “positive” 
    elif psc(s,1) &lt; psc(s,-1):
       return “negative” 
    else:
       return “neutral”</p>

<p>```</p>

<p>其中, <code>_DATA</code> 是我們蒐集的句子 , <code>_KEYWORD</code> 是關鍵字 , <code>pc(c)</code> , <code>pwc(w,c)</code> 和 <code>psc(s,c)</code> 是算機率用的 <em>function</em> 等下再解釋, <code>sentiment(s)</code> 用來算最後的結果, 是正評( <em>positive</em> )還是負評( <em>negative</em> )</p>

<p>接著到 <em>python</em> 的 <em>interactive mode</em> 載入這個檔案</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import sentiment as st</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>首先, 計算正負評的句子在 <code>_DATA</code> 裡面所占的比例, 分別為 <script type="math/tex">P(+)</script> 和 <script type="math/tex">P(-)</script> , 本程式給正評的 <em>label</em>  為 <code>1</code> , 附評的 <em>label</em> 為 <code>-1</code> , 操作方法如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.pc(1)
0.75</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.pc(-1)
0.25</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>得出, 正評的句子所占的比例為 <code>0.75</code> , 以此類推</p>

<p>接著來算看看, 已知某個句子是正評, 則此文章出現關鍵字 <code>like</code> 的機率, 為 <script type="math/tex">P(like \mid  +)</script></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.pwc(‘like’,1)
0.3333333333333333</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再來, 給定一個句子, 如下</p>

<script type="math/tex; mode=display">

\text{I really like this simple course a lot.}

</script>

<p>計算這個句子是正評的機率</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.psc(‘I really like this simple course a lot’,1)
0.026028648003351664</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也可以直接用 <code>st.sentiment(s)</code> 判斷這個句子是正評還是負評, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.sentiment(‘I really like this simple course a lot’)
‘positive’</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再來, 看看負評的例子</p>

<script type="math/tex; mode=display">

\text{I hate this course, it is too boring.}

</script>

<p>經由程式計算的結果, 此句為負評, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>st.sentiment(‘I hate this course, it is too boring’)
‘negative’</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>以上是簡單 <em>Sentiment Analysis</em>  實作 </p>

<p>其實, 在現實生活的應用中, <em>Sentiment Analysis</em> 的演算法, 還需要考慮到否定詞可以反轉句子的意思, </p>

<p>例如 <em>I don’t like this course.</em> 和 <em>I like this course.</em> 這兩句的意思是相反的, 但是只看關鍵字, 未必能準確判斷</p>

<h2 id="reference">4.Reference</h2>

<p>本文內容和範例, 參考至以下這門 <em>coursera</em> 的線上課程 </p>

<h4 id="dr-gautam-shroff--web-intelligence-and-big-data">Dr. Gautam Shroff.  Web Intelligence and Big Data</h4>

<p>https://www.coursera.org/course/bigdata</p>
]]></content>
  </entry>
  
</feed>
