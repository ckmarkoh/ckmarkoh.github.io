<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nltk | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/nltk/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2016-12-25T17:44:37+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NLTK Rule-Based Chunking]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/05/06/python-nltk-rule-based-chunking/"/>
    <updated>2014-05-06T14:46:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/05/06/python-nltk-rule-based-chunking</id>
    <content type="html"><![CDATA[<h2 id="chunking">Chunking</h2>

<p>分析句子的成份, 當句子不符合文法時, 使用 <em>Context-Free Grammar</em> 去做 <em>Parsing</em> , 可能會得不出結果, 而某些應用, 需要的並不是完整的剖析樹, 而是把句子中某些成份給找出來</p>

<p><em>Chunking</em> 的概念就是, 把句子中的單字分組, 每一組是由一到多個相鄰的單字所組成, 例如, 想要得出句子中有哪些名詞片語, 就可以把相鄰的定冠詞, 名詞修飾語, 以及名詞, 分成一組, 分組所得出的即為名詞片語</p>

<p>舉個例子, 在以下的句子中, 想要找出名詞片語有哪些</p>

<script type="math/tex; mode=display">

\text{The little yellow dog barked at the cat}.

</script>

<p>首先, 對這個句子進行 <em>Part of speech Tagging</em></p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{array}{c}

&\text{The} &\text{little} &\text{yellow} &\text{dog} &\text{barked} &\text{at} &\text{the} &\text{cat} \\

&\text{DT} &\text{JJ} &\text{JJ} &\text{NN} &\text{VBD} &\text{IN} &\text{DT} &\text{NN} 

\end{array}

 %]]&gt;</script>

<!--more-->

<p><em>Part of speech Tagging</em> 完之後可得出這些單字, 就可以根據這些單字的 <em>Tag</em> 來決定要怎麼分組, 如果要找名詞片語, 可以把相鄰的 <em>DT</em> , <em>JJ</em> 和 <em>NN</em> 分到名詞片語 <em>NP</em> 的組別中 , 如下</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{bmatrix}

 &\text{The} &\text{little} &\text{yellow} &\text{dog} \\

 &\text{DT} &\text{JJ} &\text{JJ} &\text{NN} \\

 &\mathbf{NP}

\end{bmatrix}\mspace{10mu}

\begin{array}{c}

 &\text{barked} &\text{at} \\

 &\text{VBD} &\text{IN} \\

 &

\end{array}\mspace{20mu}

\begin{bmatrix}

 &\text{the} &\text{cat} \\

 &\text{DT} &\text{NN} \\

 &\mathbf{NP}

\end{bmatrix}

 %]]&gt;</script>

<p>根據以上結果得出, 名詞片語有 <em>The little yellow dog</em> 和 <em>the cat</em></p>

<p><em>Chunking</em> 的演算法, 主要有兩種, 一種是 <em>Rule-Based</em>, 另一種是 <em>Machine-Learning-Based</em> , 本文的重點放在前者</p>

<h2 id="rule-based-chunking">Rule-Based Chunking</h2>

<p><em>Rule-Based Chunking</em> 是根據事先定好的 <em>Rule</em> 來進行 <em>Chunking</em>, 例如以上例子, 定義好名詞片語的成份有哪些, 來尋找句子中哪些單字可以組成名詞片語</p>

<p>在 <em>python nltk</em> 裡, 可以用 <code>RegexpParser</code> 以 <em>regular expression</em> 來定義這些 <em>rule</em></p>

<p>首先, 載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk import RegexpParser</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>以及例句</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sentence = [(“the”, “DT”), (“little”, “JJ”), (“yellow”, “JJ”), (“dog”, “NN”) \ 
…            ,(“barked”, “VBD”), (“at”, “IN”),  (“the”, “DT”), (“cat”, “NN”)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用 <em>Regular Expression</em> 定義好 <em>NP</em> 的 <em>Rule</em></p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>grammar = “NP: {&lt;DT&gt;?<jj>*<nn>}"</nn></jj></p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>以上的 <em>rule</em> 表示, <em>NP</em> 是由 <em>0~1</em> 個 <em>DT</em> , <em>0</em> 個以上的 <em>JJ</em> 和 一個 <em>NN</em> 所組成的 </p>

<p>再來用 <code>RegexpParser</code> 進行 <em>Chunking</em>, 得出以下結果</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result = RegexpParser(grammar).parse(sentence)
print result
(S
  (NP the/DT little/JJ yellow/JJ dog/NN)
  barked/VBD
  at/IN
  (NP the/DT cat/NN))</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也可以把結果畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="/images/pic/pic_00073.png" alt="ch1" /></p>

<p>如上圖顯示, <em>Chunking</em> 的結果, 把屬於 <em>NP</em> 的元素都歸到 <em>NP</em> 底下了</p>

<h2 id="chinking">Chinking</h2>

<p>前文所提到的 <em>Chunking</em> 是先定義好, 哪個類別 <em>有</em> 哪些元素</p>

<p>但有時候, 想要的取得的類別, 要一一列舉其中的元素, 列舉不完, 如果要用消去法的概念, 來定義哪些元素不包含在這個類別裡面, 就方便多了</p>

<p>而 <em>Chinking</em> 的概念是用消去法, 定義哪個類別 <strong>沒有</strong> 哪些元素, 把那些沒有的元素排除, 而剩下來的就被分到該類別</p>

<p>例如可以定義, <em>NP</em> 沒有 <em>VBD</em> 或 <em>IN</em> 這兩者, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>grammar2 = r”””
…   NP:
…     {&lt;.*&gt;+}          # Chunk everything
…     }&lt;VBD|IN&gt;+{      # Chink sequences of VBD and IN
…   “””</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>其中, <code>{&lt;.*&gt;+}</code> 是先把所有東西都包含進去, 再來的 <code>}&lt;VBD|IN&gt;+{ </code> 是用 <em>Chinking</em> 把 <em>VBD</em> 和 <em>IN</em> 這兩者排除, 執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result = RegexpParser(grammar2).parse(sentence)
print result
(S
  (NP the/DT little/JJ yellow/JJ dog/NN)
  barked/VBD
  at/IN
  (NP the/DT cat/NN))</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>把結果畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>result.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="/images/pic/pic_00073.png" alt="ch1" /></p>

<p>得出結果和前文的 <em>Chunking</em> 相同</p>

<h1 id="further-reading">Further Reading</h1>

<p>本文是對 <em>Rule-Based Chunking</em> 很簡單的介紹</p>

<p>想要更深入了解, 請看</p>

<p>Python nltk Documentation Chunking</p>

<p>http://nltk.googlecode.com/svn/trunk/doc/book/ch07.html#fig-chunk-segmentation</p>

<p>Python nltk HOWTO chunk</p>

<p>http://www.nltk.org/howto/chunk.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLTK Dependency Grammar]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/05/03/python-nltk-dependency-grammar/"/>
    <updated>2014-05-03T15:00:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/05/03/python-nltk-dependency-grammar</id>
    <content type="html"><![CDATA[<h2 id="introduction">1. Introduction</h2>

<p>在自然語言處理中, <em>Phase-Structured Grammar</em> 這類的文法, 是把一個句子, 剖析成一個 <strong>完整的剖析樹</strong> , 它的重點是句子中各個成份的階層關係, 例如 <em>Context-Free Grammar</em></p>

<p>而所謂的 <em>Dependenct Grammar</em> , 是著重在 <strong>字和字之間關係</strong> , 而非整個句子中各種成份階層關係, 例如 </p>

<script type="math/tex; mode=display">

\text{I shot an elephant in my pajamas.}

</script>

<p>用<em>Depedenct Grammar</em> 可以表示成這樣</p>

<p><img src="/images/pic/pic_00067.png" alt="d0" /></p>

<p>如上圖, 把詞語和詞語之間的關係, 用箭頭表示, 箭頭的起點為 <em>Head</em>, 終點為 <em>dependents</em> , 標示箭頭上的英文字代表 <em>Head</em> 和 <em>Dependent</em> 之間的 <em>relation</em></p>

<!--more-->

<p><em>Head</em> 的意思是中心語, 就是比較重要的概念, 而 <em>Dependent</em> 則是用來修飾這個概念的詞語 , 例如 <em>an elephant</em> 這一小片段中, 重要的概念為 <em>elephant</em> , 而 <em>an</em> 是 <em>elephant</em> 的修飾語</p>

<p>通常會在句子中挑一個最重要的中心語, 通常是動詞, 當作 <em>ROOT</em> , 如上圖例子的 <em>ROOT</em> 為 <em>shot</em>, 而 <em>shot</em> 的 <em>Dependent</em> 有 <em>I</em> 和 <em>elephant</em> , 它們和 <em>shot</em> 之間的 <em>relation</em> 分別為 <em>SBJ</em> 和 <em>OBJ</em> , 以此類推</p>

<p>相較於 <em>Phase-Structured Grammar</em> 需要整個句子都文法正確, 才可以得出剖析樹, 而 <em>Dependency Grammar</em> 不需要整個句子裡面的每個字都文法正確, 也可以得到剖析樹, 因為只需要注意字和字的關係即可</p>

<h2 id="dependencygraph">2. DependencyGraph</h2>

<p>在 <em>python nltk</em> 裡, 可以用 <code>DependencyGraph</code> 來載入 <em>Dependency Grammar</em></p>

<p>首先載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk.parse import DependencyGraph</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著用以下的 <em>string</em> 來表示前例的 <em>Dependency Grammar</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dep_str= \
… “””
… I         NOUN  2    SBJ
… shot      VERB  0    ROOT 
… an        DET   4    DETMOD
… elephant  NOUN  2    OBJ
… in        PREP  4    NMOD
… my        DET   7    DETMOD
… pajamas   NOUN  5    PMOD
… “””</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>

    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>其中, 每行可分成四個部份, 第一部份是句子中的單字, 第二部份是這個單字的 <em>Part of Speech(POS) Tagging</em> , 第三和第四部份是它的 <em>Head</em> 的 <em>index</em> 以及 <em>relation</em>, 例如 <em>I</em> 這個字, 它的 <em>POS Tagging</em> 為 <em>Noun</em> , 它的 <em>Head</em> 為 <em>shot</em>, <em>Head</em> 的 <em>index</em> 為 <em>shot</em> 在句子中的位置, 為 <em>2</em>, 而 <em>relation</em> 為 <em>SBJ</em> , 以此類推, 見下圖</p>

<p><img src="/images/pic/pic_00068.png" alt="d1" /></p>

<p>上圖將每個字標上 <em>index</em> , 以方便建構出 <em>Dependency Graph</em></p>

<p>再來用 <code>DependencyGraph</code> 讀入這個 <code>dep_str</code></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dg = DependencyGraph(dep_str) </p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>可以把 <em>Dependency Graph</em> 轉成 <em>Syntax Tree</em> 印出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dg.tree().pprint()
‘(shot I (elephant an (in (pajamas my))))’</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>或者畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dg.tree().draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>呈現如下圖</p>

<p><img src="/images/pic/pic_00070.png" alt="d2" /></p>

<p>由上圖可知, <em>Dependency Grammar</em> 所形成的 <em>syntax tree</em> , 和 <em>Phase-Structured Grammar</em> 最大的不同點在於, 每個 <em>Node</em> 是一個字, 而不是 <em>Non-Terminal</em> , <em>Node</em> 和 <em>Node</em> 之間的 <em>edge</em> 表示 <em>dependent relation</em> 而非 <em>production</em>. </p>

<h2 id="dependency-parsing">3. Dependency Parsing</h2>

<p>接著來談到如何把一個句子, 利用 <em>Dependency Grammar</em> 轉成 <em>Syntax Tree</em> 和 <em>Dependency Graph</em></p>

<p>先載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk import parse_dependency_grammar</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>還有尚未剖析的 <em>Raw Sentence</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sent = ‘I shot an elephant in my pajamas’.split()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著是 <em>Grammar</em> 的部份, 箭號左邊為 <em>head</em> , 右邊為 <em>dependent</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dep_grammar = parse_dependency_grammar(
… “””
… ‘shot’ -&gt; ‘I’ | ‘elephant’ | ‘in’
… ‘elephant’ -&gt; ‘an’ | ‘in’
… ‘in’ -&gt; ‘pajamas’
… ‘pajamas’ -&gt; ‘my’
… “””
… )</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>在 <code>nltk</code> 裡面, 提供兩種方式, 分別為 <em>Projective Dependency</em> 和 <em>Non-Projective Dependency</em></p>

<p>分別可以把 <em>Raw Sentence</em> 轉為 <em>Syntax Tree</em> 和 <em>Dependency Graph</em></p>

<h3 id="projective-dependency-parsing">3.1 Projective Dependency Parsing</h3>

<p><code>ProjectiveDependencyParser</code> 可將 <em>Raw Sentence</em> 轉為 <em>syntax tree</em></p>

<p>載入以下模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk import ProjectiveDependencyParser</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著用 <code>ProjectiveDependencyParser</code> 載入文法來剖析句子, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>trees = ProjectiveDependencyParser(dep_grammar).parse(sent)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>因為本例的文法為 <em>ambiguous grammar</em> , 也就是說, 可能的 <em>syntax tree</em> 超過一種以上</p>

<p>程式會求出所有可能的 <em>syntax tree</em> , 如本例, 有兩個可能的 <em>syntax tree</em> </p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>trees[0].pprint()
‘(shot I (elephant an (in (pajamas my))))’</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>trees[1].pprint()
‘(shot I (elephant an) (in (pajamas my)))’</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用以下方法畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>trees[0].draw()
trees[1].draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="/images/pic/pic_00070.png" alt="d2" /></p>

<p><img src="/images/pic/pic_00071.png" alt="d3" /></p>

<h3 id="non-projective-dependency-parsing">3.2 Non-Projective Dependency Parsing</h3>

<p><code>NonprojectiveDependencyParser</code> 可將 <em>Raw Sentence</em> 轉為 <em>dependency graph</em></p>

<p>載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from nltk import NonprojectiveDependencyParser</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著用 <code>NonprojectiveDependencyParser</code> 載入文法來剖析句子, 如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dep_graphs = NonprojectiveDependencyParser(dep_grammar).parse(sent)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>本例也會得出兩個可能的結果, 可以用 <code>print</code> 印出 <em>dependency graph</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print dep_graphs[0]
[{‘address’: 0, ‘deps’: 2, ‘rel’: ‘TOP’, ‘tag’: ‘TOP’, ‘word’: None},
 {‘address’: 1, ‘deps’: [], ‘word’: ‘I’},
 {‘address’: 2, ‘deps’: [1, 4], ‘word’: ‘shot’},
 {‘address’: 3, ‘deps’: [], ‘word’: ‘an’},
 {‘address’: 4, ‘deps’: [3, 5], ‘word’: ‘elephant’},
 {‘address’: 5, ‘deps’: [7], ‘word’: ‘in’},
 {‘address’: 6, ‘deps’: [], ‘word’: ‘my’},
 {‘address’: 7, ‘deps’: [6], ‘word’: ‘pajamas’}]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print dep_graphs[1]
[{‘address’: 0, ‘deps’: 2, ‘rel’: ‘TOP’, ‘tag’: ‘TOP’, ‘word’: None},
 {‘address’: 1, ‘deps’: [], ‘word’: ‘I’},
 {‘address’: 2, ‘deps’: [1, 4, 5], ‘word’: ‘shot’},
 {‘address’: 3, ‘deps’: [], ‘word’: ‘an’},
 {‘address’: 4, ‘deps’: [3], ‘word’: ‘elephant’},
 {‘address’: 5, ‘deps’: [7], ‘word’: ‘in’},
 {‘address’: 6, ‘deps’: [], ‘word’: ‘my’},
 {‘address’: 7, ‘deps’: [6], ‘word’: ‘pajamas’}]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>其中 <code>address</code> 表示 <code>word</code> 的 <em>id</em> , <code>deps</code> 為這個 <code>word</code> 的 <em>dependent</em></p>

<p><em>註：事實上,  Non-Projective 和 Projective 最主要的差異在於, Non-Projective 可以處理字詞順序可任意顛倒的語言, 在處理這種語言時, 產生出的 Syntax Tree 由於字詞顛倒, 會有交叉, 故通常用 Dependency Graph 來表示結果, 本文不探討這種現象, 若你想了解, 請看以下的 Further Reading</em> </p>

<h2 id="furtuer-reading">Furtuer Reading</h2>

<p>想要了解更多關於 <em>Dependency Grammar</em> 可以看以下兩篇 <em>python nltk</em> 的 <em>Documentation</em></p>

<p>Python nltk HOWTO dependency</p>

<p>http://www.nltk.org/howto/dependency.html</p>

<p>Python nltk book ch08</p>

<p>http://nltk.googlecode.com/svn/trunk/doc/book/ch08.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLTK Logic 4 : Model and Satisfiability]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/29/python-nltk-logic-4/"/>
    <updated>2014-03-29T15:39:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/29/python-nltk-logic-4</id>
    <content type="html"><![CDATA[<h2 id="model-and-satisfiability">1.Model and Satisfiability</h2>

<p>可滿足性(Satisfiability)是在探討, 邏輯式子所建立出的模型(Model),</p>

<p>可不可以找到一組解, 使得這個 <em>Model</em> 算出來的值可以是 <script type="math/tex">True</script></p>

<p>例如：</p>

<script type="math/tex; mode=display">

p1=(x \vee y), \mspace{5mu}

p2=(\neg x \vee y),  \mspace{5mu}

p3=(x \vee \neg y) \\

M1=p1 \wedge p2 \wedge p3

</script>

<p>則當 <script type="math/tex">x\equiv True, \mspace{5mu} y \equiv  True</script> 時, <script type="math/tex">M1 \equiv True </script></p>

<p>則 <em>Model</em> <script type="math/tex">M1</script> 是 <em>Satisfiable</em></p>

<p>另一例子：</p>

<script type="math/tex; mode=display">

p1=(x \vee y), \mspace{5mu}

p2=(\neg x \vee y),  \mspace{5mu}

p3=(x \vee \neg y) \mspace{5mu}

p4=(\neg x \vee \neg y)\\

M2=p1 \wedge p2 \wedge p3 \wedge p4

</script>

<p>這種情形,不論 <script type="math/tex">x</script> 或 <script type="math/tex">y</script> 的值,  <script type="math/tex">M2</script> 永遠都是 <script type="math/tex">False</script></p>

<p>則 <em>Model</em> <script type="math/tex">M2</script> 是 <em>Unsatisfiable</em></p>

<!--more-->

<h2 id="implementation-1">2.Implementation 1</h2>

<p>接著我們用nltk來做簡單的 <em>Satisfiability</em> 問題</p>

<p>先載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import nltk
lgp = nltk.LogicParser()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著,輸入邏輯式子<script type="math/tex">p1=(x \vee y), \mspace{5mu} p2=(\neg x \vee y),  \mspace{5mu}p3=(x \vee \neg y) \mspace{5mu}</script></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <table>
        <tbody>
          <tr>
            <td>p1 = lgp.parse(‘x</td>
            <td>y’)</td>
          </tr>
          <tr>
            <td>p2 = lgp.parse(‘-x</td>
            <td>y’)</td>
          </tr>
          <tr>
            <td>p3 = lgp.parse(‘x</td>
            <td>-y’)</td>
          </tr>
        </tbody>
      </table>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>然後把assignment加進去, 看看 <script type="math/tex">M1=p1 \wedge p2 \wedge p3</script> 是否 <em>satisfiable</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>val = nltk.Valuation([(‘x’, True), (‘y’, True)])
dom = val.domain
g = nltk.Assignment(dom)
m = nltk.Model(dom, val)
m.satisfy(p1 &amp; p2 &amp; p3, g ) 
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再把 <script type="math/tex">p4=(\neg x \vee \neg y)</script> 加進去, 看看<script type="math/tex">M2=p1 \wedge p2 \wedge p3 \wedge p4</script> 是否 <em>satisfiable</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>p4 = lgp.parse(‘-x | -y’)
m.satisfy(p1 &amp; p2 &amp; p3 &amp; p4, g ) 
False</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="first-order-logic">3. First Order Logic</h2>

<p>接著我們來看看如何將 <em>Model</em> 和 <em>Satisfiability</em> 的概念, 推廣到一階邏輯(First Order Logic)中</p>

<p>例如,在某個世界裡,</p>

<p><em>Gary</em> 是個男生, <em>Judy</em> 是個女生, 而 <em>Henry</em> 是一隻狗,</p>

<p><em>Gary</em> 和 <em>Henry</em> 在跑步, </p>

<p><em>Judy</em> 看見 <em>Henry</em> 而 <em>Gary</em> 看見 <em>Judy</em></p>

<p>我們可以用一階邏輯(First Order Logic)把這個世界表示成一個 <em>Model</em>：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

&M=\\

& Gary(g)  &\wedge \mspace{15mu} & Judy(j)  &\wedge \mspace{15mu} &Henry(h) &\wedge\\

& Boy(g)   &\wedge \mspace{15mu} & Girl(j)  &\wedge \mspace{15mu} &Dog(h)   &\wedge\\

& Run(g)   &\wedge \mspace{15mu} & Run(h)   &\wedge \mspace{15mu} & & \\

& See(j,h) &\wedge \mspace{15mu} & See(g,j) &\wedge \mspace{15mu} &See(g,h)

\end{align}

 %]]&gt;</script>

<p>根據這個Model, 用<em>Satisfiability</em>的概念, 可以求解以下問題</p>

<p>1 . 找找看這個世界中女生有哪些</p>

<p>這個問題可以看成是, 從找 <em>M</em> 中找出滿足 <script type="math/tex">girl(x)</script> 的 <script type="math/tex">x</script> 值有哪些, </p>

<p>可求解 <script type="math/tex">girl(x) \wedge M </script> 的 <em>Satisfiability</em> , 得出：</p>

<p>女生有 <em>Judy</em> , 因為當 <script type="math/tex">x=j</script> 時, <script type="math/tex">girl(x) \wedge M </script> 為 <em>Satisfiable</em></p>

<p>2 . 回答這個世界中是否有男生在跑步, 或者, 是否有女生在跑步</p>

<p>這可以看成是, 判斷某個 formula 和這個 <em>M</em> 是否有交集, 得出：</p>

<p>有男生在跑步, 因為 <script type="math/tex">\exists x(Run(x) \wedge boy(x) ) </script> 在 <script type="math/tex"> M </script> 中為 <em>Satisfiable</em></p>

<p>沒有女生在跑步, 因為 <script type="math/tex">\exists x(Run(x) \wedge girl(x) ) </script> 在 <script type="math/tex"> M </script> 中為 <em>Unsatisfiable</em></p>

<p>3 . 回答是否 <em>Judy</em> 看見 <em>Henry</em> , 或者,是否 <em>Judy</em> 看見 <em>Gary</em></p>

<p>可以判斷某個assignment 是否可讓 <em>M</em> 為 <em>Satisfiable</em> , 得出：</p>

<p><em>Judy</em> 看見 <em>Henry</em> , 因為當 <script type="math/tex">x=j,y=h</script> 時, <script type="math/tex">See(x,y) </script> 在 <script type="math/tex">M </script> 中為 <em>Satisfiable</em></p>

<p><em>Judy</em> 沒有看見 <em>Gary</em> , 因為當<script type="math/tex">x=j,y=g</script> 時, <script type="math/tex">See(x,y) </script> 在 <script type="math/tex">M </script> 中為 <em>Unsatisfiable</em></p>

<p>註：</p>

<p>1.在 python nltk 用的是 <em>Closed World Assumption</em> </p>

<p>也就是說, 在 <em>Model</em> 裡面沒有定義的, 一律為 <em>False</em></p>

<p>例如沒有定義 <em>Run(j)</em> , 所以 <em>Run(j)</em> 為 <em>False</em> </p>

<p>因此 <script type="math/tex">\exists x(Run(x) \wedge girl(x) ) </script> 在 <script type="math/tex"> M </script> 中為 <em>Unsatisfiable</em> </p>

<p>同理, <em>See(j,g)</em> 在 <script type="math/tex">M </script> 中為 <em>Unsatisfiable</em></p>

<p>2.相對於 <em>Closed World Assumption</em> </p>

<p>有另一種叫作 <em>Open World Assumption</em> </p>

<p>是將沒有定義的formula 它視為 <em>Unknown</em></p>

<p>所以結果除了 <em>True</em> 和 <em>False</em> 之外, 還有 <em>Unknown</em></p>

<h2 id="implementation-2">4.Implementation 2</h2>

<p>用 python nltk 來實作看看：</p>

<p>首先, 建立 model</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>v = “”” 
… Gary =&gt; g
… Judy =&gt; j
… Henry =&gt; h
… boy =&gt; {g}
… girl =&gt; {j}
… dog =&gt; {h}
… run =&gt; {g, h}
… see =&gt; {(j, h), (g, j), (g, h)}
… “””</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>val = nltk.parse_valuation(v)
m = nltk.Model(val.domain, val)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>1.求 <script type="math/tex">girl(x)</script> 的 <script type="math/tex">x</script> 值:</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>m.satisfiers(lgp.parse(‘girl(x)’), ‘x’  , nltk.Assignment(val.domain, []))
set([‘j’])</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>得出結果 <script type="math/tex">x=j</script></p>

<p>2.求 <script type="math/tex">\exists x (Run(x) \wedge boy(x)) </script> 或 <script type="math/tex">\exists x (Run(x) \wedge girl(x))</script> 這兩個formula在 <script type="math/tex">M</script> 中是否為 <em>Satisfiable</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>m.satisfy(lgp.parse(‘exists x.(run(x) &amp; boy(x))’),nltk.Assignment(val.domain, []))
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>m.satisfy(lgp.parse(‘exists x.(run(x) &amp; girl(x))’),nltk.Assignment(val.domain, []))
False</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>得出結果：</p>

<p><script type="math/tex">\exists x(Run(x) \wedge boy(x) )</script> 在 <script type="math/tex">M </script> 中為 <em>Satisfiable</em></p>

<p><script type="math/tex">\exists x(Run(x) \wedge girl(x) ) </script> 在 <script type="math/tex">M </script> 中為 <em>Unsatisfiable</em></p>

<p>3.求 <script type="math/tex">x=j,y=h</script> 或 <script type="math/tex">x=j,y=g</script> 對於 <script type="math/tex">See(x,y)</script> 在 <script type="math/tex">M</script> 中是否為 <em>Satisfiable</em></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>m.satisfy(lgp.parse(‘see(x,y)’),nltk.Assignment(val.domain,[(‘x’, ‘j’), (‘y’, ‘h’)]))
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>m.satisfy(lgp.parse(‘see(x,y)’),nltk.Assignment(val.domain,[(‘x’, ‘j’), (‘y’, ‘g’)]))
False</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>得出結果：</p>

<p>當 <script type="math/tex">x=j,y=h</script> 時, <script type="math/tex">See(x,y) </script> 在 <script type="math/tex">M </script> 中為 <em>Satisfiable</em></p>

<p>當<script type="math/tex">x=j,y=g</script> 時, <script type="math/tex">See(x,y)</script> 在 <script type="math/tex">M </script> 中為 <em>Unsatisfiable</em></p>

<h2 id="reference">5.Reference</h2>

<p>關於python nltk的 <em>model</em> 和 <em>satistiability</em> 可參考：</p>

<p>http://nltk.googlecode.com/svn/trunk/doc/book/ch10.html</p>

<p>關於 <em>Closed World Assumption</em> 與 <em>Open World Assumption</em> 可參考：</p>

<p>http://en.wikipedia.org/wiki/Closed_world_assumption</p>

<p>http://en.wikipedia.org/wiki/Open_world_assumption</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLTK Logic 3 : Discourse Representation Theory]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/21/python-nltk-logic-3/"/>
    <updated>2014-03-21T03:58:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/21/python-nltk-logic-3</id>
    <content type="html"><![CDATA[<h2 id="introduction">1. Introduction</h2>

<p><em>Discourse</em> 的意思是對話</p>

<p>在對話中,常常會用到 <strong>代名詞</strong> ,像是 <em>he</em>, <em>she</em> 或 <em>it</em>.</p>

<p>我們把這種代名詞叫做 <em>anaphoric pronouns</em></p>

<p>因為要從前面的句子去判斷,這些代名詞代表什麼</p>

<p>比如有個句子 <em>A woman walks. She smokes.</em></p>

<p>在下一句的 <em>She</em> 是指前一句提到的 <em>A woman</em></p>

<p>那要怎麼讓電腦去判斷, <strong>代名詞</strong> 到底代表前面提到的什麼？</p>

<p>這就要用到 <em>Discourse Representation Theory (DRT)</em> 來處理了</p>

<p>例如 <em>A woman walks</em> 這句話,用 <em>DRT</em> 可以表示成這樣：</p>

<script type="math/tex; mode=display">

    \begin{array}{|c|}

    \hline x  \\ \hline

    	woman(x) \\

      walk(x) \\

    \hline

		\end{array}

</script>

<!--more-->

<p>這樣一個框框的結構叫作 <em>Discourse Representation Structure</em> ,簡稱 <em>DRS</em></p>

<p>其中位於方框上面的 <script type="math/tex">x</script> 叫做 <em>Discourse Referent</em> </p>

<p>它代表這個句子中,可以被其他代名詞參考的東西</p>

<p>方框下方的式子叫做 <em>DRS conditions</em> </p>

<p>它代表這些文句所產生的情境</p>

<p>第二個句子 <em>She smokes.</em></p>

<p>用 <em>DRT</em> 表示成這樣：</p>

<script type="math/tex; mode=display">

    \begin{array}{|c|}

    \hline y  \\ \hline

      PRO(y) \\

      smoke(y) \\

    \hline

		\end{array}

</script>

<p>其中, <script type="math/tex">PRO(y)</script> 表示 <script type="math/tex">y</script> 是一個代名詞,但不知道它代表誰</p>

<p>這個時候就要用 <em>DRT</em> ,把對話中前後語句的情境結合起來</p>

<p>就可以進行 <em>Resolve Anaphora</em> 找出代名詞代表什麼</p>

<p>例如：</p>

<p><em>A woman walks. She smokes.</em></p>

<p>用 <em>DRT</em> 表示成：</p>

<script type="math/tex; mode=display">

    \begin{array}{|c|}

    \hline x  \\ \hline

    	woman(x) \\

      walk(x) \\

    \hline

		\end{array}

    +

    \begin{array}{|c|}

    \hline y  \\ \hline

      PRO(y) \\

      smoke(y) \\

    \hline

		\end{array}

    \xrightarrow{Simplify}

    \begin{array}{|c|}

    \hline x,y  \\ \hline

    	woman(x) \\

      walk(x) \\

      PRO(y) \\

      smoke(y) \\

    \hline

		\end{array}

    \xrightarrow{Resolve\mspace{5mu} Anaphora}

    \begin{array}{|c|}

    \hline x,y  \\ \hline

    	woman(x) \\

      walk(x) \\

      x = y \\

      smoke(y) \\

    \hline

		\end{array}

</script>

<p>藉由 <em>DRT</em> ,我們可以知道 <em>She</em> 是指 <em>A woman</em></p>

<p>然後,還可以把 <em>DRS</em> 轉成一階邏輯的式子：</p>

<p>像這樣：</p>

<script type="math/tex; mode=display">

    \begin{array}{|c|}

    \hline x,y  \\ \hline

    	woman(x) \\

      walk(x) \\

      x = y \\

      smoke(y) \\

    \hline

		\end{array}

    \Rightarrow

    \exists x \exists y.( woman(x) \wedge walk(x) \wedge (x = y) \wedge smoke(y))

</script>

<h2 id="drt-in-nltk">2. DRT in nltk</h2>

<p>現在我們來用nltk實作看看</p>

<p>先載入模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import nltk</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>接著我們輸入 <em>A woman walks</em> 的 <em>DRT</em> </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>dp = nltk.DrtParser()
drs1 = dp.parse(‘([x], [woman(x), walk(x)])’) 
print drs1
([x],[woman(x), walk(x)])</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>我們也可以把 <em>DRT</em> 的結構畫出來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>drs1.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>像這樣</p>

<p><img src="http://lh6.googleusercontent.com/-89PLq9VYopQ/UyvQx-TxTfI/AAAAAAAAAqY/cU232E7UWKQ/s165-no/DRT.png" /></p>

<p>接著我們把第二句話 <em>She smokes.</em> 也一起輸入</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>drs2 = dp.parse(‘([y], [PRO(y),smokes(y)])’) 
drs2.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="http://lh3.googleusercontent.com/-ugJ-AhsCo28/Uyva__Uz4QI/AAAAAAAAAqw/wgYKB9yYOcI/w163-h165-no/DRT2.png" /></p>

<p>其中 <code>PRO(y)</code> 是未知的代名詞,</p>

<p>因為只看這句話不知道這個代名詞代表什麼, </p>

<p>需要和第一句話結合起來才知道</p>

<p>我們可以用 <code>+</code> 把這 <em>兩個DRS</em> 合起來</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>drs3=drs1+drs2
drs3.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="http://lh6.googleusercontent.com/-ZVVEazh0bxU/Uyva_xl9HZI/AAAAAAAAArE/FOh2NjrkihE/w335-h158-no/DRT3.png" /></p>

<p>再用 <code>simplify()</code> 把這兩個 <em>DRS</em> 簡化成一個</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>drs4=drs3.simplify()
drs4.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="http://lh6.googleusercontent.com/-XS97Rkd11iM/Uyva_tAb7oI/AAAAAAAAArU/ga7l4KP5QV4/w165-h240-no/DRT4.png" /></p>

<p>然後再用 <code>resolve_anaphora()</code> 找出代名詞 <code>PRO(y)</code> 代表什麼</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>drs5=drs4.resolve_anaphora()
drs5.draw()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p><img src="http://lh6.googleusercontent.com/-xqOOLlm0h7w/UyvbAKBA7RI/AAAAAAAAAq8/KOkSJP2nJG4/w168-h240-no/DRT5.png" /></p>

<p>這時,原本的 <code>PRO(y)</code>  會變成 <code>(y = x)</code> 表示已經找出了 <code>y</code> 代表什麼</p>

<p>然後, 還可以把 <em>DRS</em> 轉成 <em>First-order Logic</em> 的式子</p>

<p>像這樣：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>f1=drs5.fol()
print f1
exists x y.(woman(x) &amp; walks(x) &amp; (y = x) &amp; smokes(y))</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣就大功告成了</p>

<h2 id="further-reading">3.Further Reading</h2>

<p>其實 <em>DRT</em> 還可以解決許多關於對話中的語意問題</p>

<p>有興趣的話可以看這個網站：Discourse Representation Theory </p>

<p>http://www.coli.uni-saarland.de/projects/milca/courses/comsem/html/node205.html</p>

<p>以及這本書：</p>

<p><em>Hans Kamp, Josef van Genabith, Uwe Reyle. Discourse Representation Theory</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Nltk -- Logic 2 : Lambda Calculus]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/13/python-nltk-logic-2/"/>
    <updated>2014-03-13T14:09:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/13/python-nltk-logic-2</id>
    <content type="html"><![CDATA[<p>本篇介紹如何用python nltk 的應用,邏輯語意與lambda calculus</p>

<h2 id="introduction">1.introduction</h2>

<p>邏輯語意學在語意推導方面,通常會用到 <script type="math/tex">\lambda -calculus</script></p>

<p>使用<script type="math/tex">\lambda -calculus</script>就可以把一個句子的語意,從個別單字中推導出來</p>

<p>至於<script type="math/tex">\lambda -calculus</script> 是什麼呢？</p>

<p>簡而言之,lambda calculus是一種數學運算,由以下三種元素組成</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}


& v  & (a)\\

& \lambda x.f(x)  & (b)\\

& \lambda x.f(x)(v) & (c)\\


\end{align}

 %]]&gt;</script>

<p><script type="math/tex">(a)</script> 是 <script type="math/tex">variable</script></p>

<p><script type="math/tex">(b)</script> 是 <script type="math/tex">astraction</script> ,就是把function中的variable拿到前面,加個 <script type="math/tex">\lambda</script></p>

<p><script type="math/tex">(c)</script> 是將另一個 <script type="math/tex">variable</script> 放到 <script type="math/tex">astraction</script> 後面</p>

<p>然後可以進行一種運算,叫做 <script type="math/tex">\beta-reduction</script> ,如下</p>

<script type="math/tex; mode=display">

\lambda x.f(x)(v)

\Rightarrow f(v)

</script>

<p>還有另一種運算叫做 <script type="math/tex">\alpha-conversion</script> ,其實就是更改變數名稱而已</p>

<script type="math/tex; mode=display">

\lambda x.f(x)

\Rightarrow \lambda y.f(y)

</script>

<!--more-->

<p><script type="math/tex">\lambda -calculus</script> 也是計算理論的一種,和Turing Machine等價</p>

<p>實際上以 <script type="math/tex">\lambda -calculus</script> 實現的程式語言有Functional Programming,例如Lisp或Haskell</p>

<h2 id="lambda-expression">2. lambda expression</h2>

<p>接著來實作untyped lambda calculus,</p>

<p>首先,載入模組 <code>nltk.sem.logic</code> 和 <code>LogicParser</code></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import nltk.sem.logic as logic
lgp = logic.LogicParser()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再看看 <script type="math/tex">\lambda</script> 要用哪個符號</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>logic.binding_ops()
existential    	exists
universal      	all
lambda         	\</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>要表示lambda <script type="math/tex">\lambda</script> 符號,要用 <code>\</code> 字串</p>

<p>然後,用<code>LogicParser</code>來輸入這個式子：<script type="math/tex">e1=\lambda x.P(x)</script></p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e1 = lgp.parse(r’\x.P(x)’)
print e1
\x.P(x)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="alpha-conversion">3. alpha conversion</h2>

<p>再來試試看<script type="math/tex">\alpha-conversion</script> : <script type="math/tex">\exists x.P(x) \Rightarrow \exists z.P(z)</script></p>

<p>從以下結果得知,<script type="math/tex">\alpha-conversion</script> 轉換前和轉換後,在邏輯上是相等</p>

<p>因為只是更改變數名稱而已</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e2 = e1.alpha_convert(logic.Variable(‘z’))
print e2
\z.P(z)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e1 == e2
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="beta-reduction">4. beta reduction</h2>

<p>接著,來看看 <script type="math/tex">\beta-reduction</script> </p>

<p>舉一個自然語言的例子,例如 <em>Gary walks.</em> 這個句子,用邏輯語意可以表示成</p>

<script type="math/tex; mode=display">

walks(Gary)

</script>

<p>根據Principle of Compositionality,</p>

<p>句子的語意是由單字的語意所組成的(但實際上還是有例外,例如片語)</p>

<p>推導出這個句子的語意,可由單字的語意推導出來,</p>

<p><em>walks</em> 的語意是 <script type="math/tex">\lambda x.walk(x)</script></p>

<p><em>Gary</em> 的語意是 <script type="math/tex">Gary</script></p>

<p>則 <em>Gary walks</em> 的語意是</p>

<script type="math/tex; mode=display">

\lambda x.walks(x) (Gary)\Rightarrow walks(Gary)

</script>

<p>接著來實作看看</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e3 = lgp.parse(r’\x.walks(x)(Gary)’)
e4 = e3.simplify()
print e4
walks(Gary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再舉一個例子,例如 <em>Gary sees Mary.</em> 這個句子, <em>sees</em> 是及物動詞</p>

<p>及物動詞,是表示一個主詞和受詞的關係,</p>

<p>可用 <em>First Order Logic</em> 的 <em>Relation</em> 來表示</p>

<p><em>sees</em> 的語意為 <script type="math/tex">\lambda x \lambda y .see(x,y)</script></p>

<p>而 <em>Gary sees Mary.</em> 的語意是</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align}

& \lambda x \lambda y.see(x,y) (Gary) (Mary) \\

& \Rightarrow \lambda y(Gary,y) (Mary) \\

& \Rightarrow see(Gary,Mary)

\end{align}

 %]]&gt;</script>

<p>接著,輸入nltk看看</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e5 = lgp.parse(r’\x \y.see(x,y)(Gary)(Mary)’)
print e5
((\x y.see(x,y))(Gary))(Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print e5.simplify()
see(Gary,Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>還有其他的輸入方式,結果都一樣</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e6 = lgp.parse(r’\x \y.see(x,y)(Gary,Mary)’)
e7 = lgp.parse(r’\x y.see(x,y)(Gary,Mary)’)
e8 = lgp.parse(r’\x y.see(x,y)(Gary)(Mary)’)
e9 = lgp.parse(r’(\x y.see(x,y)(Gary))(Mary)’)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>結果如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print e6
((\x y.see(x,y))(Gary))(Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print e7
((\x y.see(x,y))(Gary))(Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print e8
((\x y.see(x,y))(Gary))(Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print e9
((\x y.see(x,y))(Gary))(Mary)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>e6 == e7 == e8 == e5
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="further-reading">5.further reading</h2>

<p>想要瞭解 <script type="math/tex">\lambda -calculus</script>, 請參考http://en.wikipedia.org/wiki/Lambda_calculus</p>

<p>想要看看 nltk 裡面的 <script type="math/tex">\lambda -calculus</script> , 請至http://www.nltk.org/howto/logic.html</p>

<p>還有關於邏輯語意的研究,可以參考這本書 <em>Blackburn &amp; Bos’  Representation and Inference for Natural Language</em></p>
]]></content>
  </entry>
  
</feed>
