<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional Programming | Mark Chang's Blog]]></title>
  <link href="http://ckmarkoh.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://ckmarkoh.github.io/"/>
  <updated>2017-05-31T01:14:17+08:00</updated>
  <id>http://ckmarkoh.github.io/</id>
  <author>
    <name><![CDATA[Mark Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Enumerable 1 : Collect , Inject]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/04/30/ruby-enumerable-1/"/>
    <updated>2014-04-30T15:06:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/04/30/ruby-enumerable-1</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>在 <em>ruby</em>  裡面, 也有類似 <em>functional programming style</em> 的東西, 像是 <em>map</em> , <em>reduce</em> 之類的</p>

<p>但是這些不是像 <em>python</em> 那樣是屬於 <em>build in function</em> , 像這樣</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>map(lambda x:x*2 ,[1,2,3,4])
[2, 4, 6, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>在 <em>ruby</em> 裡面的 <em>map</em> 是這樣, 如下</p>

<p>```ruby
irb(main):001:0&gt; [1,2,3,4].map{|x| x*2}
=&gt; [2, 4, 6, 8]</p>

<p>```</p>

<p>它是 <em>Enumerable Type</em> 的 <em>Method</em> </p>

<p>除此之外, <em>map</em> 和 <em>reduce</em> 在 <em>ruby</em> 裡面還有其他的別名, 就是 <em>collect</em> 和 <em>inject</em></p>

<!--more-->

<h2 id="collect-and-map">collect and map</h2>

<p>給定一個 <em>array</em>, <code>a1</code></p>

<p>```ruby
irb(main):010:0&gt; a1 = [1,2,3,4,5]
=&gt; [1, 2, 3, 4, 5]</p>

<p>```</p>

<p><em>collect</em> 和 <em>map</em> 的意思是一樣的</p>

<p>我們如果要把每個元素乘上三再加二, 可以用以下方法</p>

<p>```ruby
irb(main):011:0&gt; a1.collect{|x| x<em>3+2 }
=&gt; [5, 8, 11, 14, 17]
irb(main):012:0&gt; a1.map{|x| x</em>3+2 }
=&gt; [5, 8, 11, 14, 17]</p>

<p>```</p>

<p>與 <em>python</em> 不同的是, <em>python</em> 只可以寫 <em>in-line</em> 的 <em>anonymous function</em> , 如果要寫多行的, 就要重新寫個 <code>def function():</code></p>

<p><em>ruby</em> 可以直接寫多行的 <em>anonymous function</em> , 方法如下</p>

<p>```ruby
irb(main):004:0&gt; a1.collect do |x|
irb(main):005:1* y = x+3
irb(main):006:1&gt; x = y<em>2
irb(main):007:1&gt; end
=&gt; [8, 10, 12, 14, 16]
irb(main):008:0&gt; a1.map do |x|
irb(main):009:1</em> y = x+3
irb(main):010:1&gt; x = y*2
irb(main):011:1&gt; end
=&gt; [8, 10, 12, 14, 16]</p>

<p>```</p>

<h2 id="collectconcat-and-flatmap">collect_concat and flat_map</h2>

<p>如果我們要處理的是 <em>array of array</em></p>

<p>```ruby
irb(main):012:0&gt; a2 = [[-1, 5], [-2, 8], [-3, 11], [-4, 14], [-5, 17]]
=&gt; [[-1, 5], [-2, 8], [-3, 11], [-4, 14], [-5, 17]]</p>

<p>```</p>

<p>希望做完運算以後可以把結果合併成同一個 <em>array</em> , 而不是<em>array of array</em> , 用 <em>collection</em> 就不夠了</p>

<p>```ruby
irb(main):013:0&gt; a2.collect{|x| [-x,x*3+2] }
=&gt; [[-1, 5], [-2, 8], [-3, 11], [-4, 14], [-5, 17]]</p>

<p>```</p>

<p>這時就要用 <em>collect_concat</em> 或 <em>flat_map</em></p>

<p>```ruby
irb(main):014:0&gt; a2.collect_concat{|x| [-x,x<em>3+2] }
=&gt; [-1, 5, -2, 8, -3, 11, -4, 14, -5, 17]
irb(main):015:0&gt; a2.flat_map{|x| [-x,x</em>3+2] }
=&gt; [-1, 5, -2, 8, -3, 11, -4, 14, -5, 17]</p>

<p>```</p>

<h2 id="inject-and-reduce">inject and reduce</h2>

<p>假設有這樣一個 <em>string of array</em> , 從 ‘2’ 到 ‘6’ </p>

<p>```ruby
irb(main):033:0&gt; a3 = [‘2’,’3’,’4’,’5’,’6’]
=&gt; [“2”, “3”, “4”, “5”, “6”]</p>

<p>```</p>

<p>如果我們希望把同一個 <em>array</em> 中所有的 <em>string</em> 都合併起來, 可以用 <em>+</em> 這個 <em>operation</em> , 進行 <em>reduce</em>, 或是寫 <em>anonymous function</em> 用 <em>inject</em></p>

<p>```ruby
irb(main):034:0&gt; a3.reduce(:+)
=&gt; “23456”
irb(main):035:0&gt; a3.inject { |sum, n| sum + n }
=&gt; “23456”</p>

<p>```</p>

<p>如果起始的第一個 <em>element</em> , 不在 <em>array</em> 中, 例如 <em>1</em> 不在 <code>a3</code> 裡面, 則可以用以下方法</p>

<p>```ruby
irb(main):036:0&gt; a3.reduce(‘1’,:+)
=&gt; “123456”
irb(main):037:0&gt; a3.inject(‘1’){ |sum, n| sum + n }
=&gt; “123456”</p>

<p>```</p>

<p>當然, <em>reduce</em> 和 <em>inject</em> 也可以寫成 <em>multiple line</em> 的 <em>anonymous function</em> , 如下</p>

<p>```ruby
irb(main):039:0&gt; %w{ cat sheep bear }.reduce do |memo, word|
irb(main):040:1*    memo.length &gt; word.length ? memo : word
irb(main):041:1&gt; end
=&gt; “sheep”
irb(main):042:0&gt; %w{ cat sheep bear }.inject do |memo, word|
irb(main):043:1*    memo.length &gt; word.length ? memo : word
irb(main):044:1&gt; end
=&gt; “sheep”</p>

<p>```</p>

<h2 id="reference">Reference</h2>

<p>http://www.ruby-doc.org/core-2.1.0/Enumerable.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Functional Programming Style 2]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/20/python-functional-programming-style-2/"/>
    <updated>2014-03-20T13:35:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/20/python-functional-programming-style-2</id>
    <content type="html"><![CDATA[<p>用Functional Programming style來寫程式的時候</p>

<p>可以大幅減少行數和變數的數量</p>

<p>本文接續上一篇:/blog/2014/03/18/python-functional-programming-style-1</p>

<p>繼續探討這種Functional Programming style在python中的應用</p>

<h2 id="operator">1. operator</h2>

<p>首先,載入 <code>operator</code> 這個模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import operator</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>然後,來介紹到底要怎麼使用</p>

<!--more-->

<h4 id="operatoradd-operatormultiply-etc">1.1, operator.add, operator.multiply, etc</h4>

<p><code>operator</code> 是一個提供加減乘除之類運算的module,</p>

<p>有的時候不太方便直接用到 <code>+</code> , <code>-</code> 這些符號,</p>

<p>這時候就要用到 <code>operator</code> 這個模組了</p>

<p>如果要求一個list中所有元素的總和,如果不會functional programming style</p>

<p>最基本的寫法,用for迴圈寫,如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>s=0
for i in [3,5,7,9,11]:
…     s += i </p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print s
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣要寫很多行</p>

<p>可以用lambda function簡化</p>

<p>```python </p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(lambda a,b:a+b,[3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>但其實可以連lambda function都不用寫</p>

<p>因為python就已經有內建好這些function</p>

<p>我們可以用 <code>operator.add</code> 搭配 <code>reduce</code> 就可以了</p>

<p>```python </p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(operator.add,[3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這就是 <code>operator</code> 的用法,可以把＋,-,之類的operator運算當成function來使用</p>

<p>事實上,根本什麼都不用寫,用內建的function <code>sum()</code> 就可以了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sum([3,5,7,9,11])
35</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>本文是為了教Functional Programming style舉出operator和reduce搭配使用</p>

<p>讓讀者懂得如何用這些功能</p>

<p>再舉一例,如果有兩向量<script type="math/tex">V_{1},V_{2}</script> </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>V1 = [2,3,4]
V2 = [5,-2,3]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>求兩向量內積 <script type="math/tex">v_{11}v_{21}+v_{12}v_{22}+v_{13}v_{23}</script></p>

<p>可以用 <code>operator.add</code> 和 <code>operator.mul</code> ,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>reduce(operator.add,map(operator.mul, V1,V2))
16</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h4 id="operatoritemgetter">1.2 operator.itemgetter</h4>

<p>在運算符號中, <code>operator.itemgetter</code> 相對於運算符號的 <code>[]</code>, </p>

<p>可以取出list 或dict 中的element</p>

<p>但有些情形 <code>operator.itemgetter</code> 會比較方便</p>

<p>給定一個list</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list = [1,2,1,3,4,6]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>假如要取出某個list中index為1者</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.itemgetter(1)(my_list)
2</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣還是直接用 <code>[]</code> 比較快</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list[1]
2</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>但是如果要取出index為1,3,5的三個element</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list[1],my_list[3],my_list[5]
(2, 3, 6)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣有點麻煩了,來用 <code>operator.itemgetter</code> 看看</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.itemgetter(1,3,5)(my_list)
(2, 3, 6)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用, <code>operator.itemgetter</code> 就比較快了</p>

<p>至於還有哪些情況會用到 <code>operator.itemgetter</code> ?</p>

<p>例如在計算語言學的研究中,用freqdist計算每個單字在文章中出現的頻率,</p>

<p>如下, <em>is</em> 出現了193次,之類的</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>freqdist=[(‘a’, 185), (‘is’, 93), (‘the’, 219), (‘he’,51)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要取出每個單字的出現頻率,可以用 <code>itemgetter</code> 搭配 <code>map</code> 使用</p>

<p>如果把單字依出現頻率高低排序,可以用 <code>itemgetter</code> 搭配 <code>sorted</code> 使用</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>map(operator.itemgetter(1),freqdist)
[185, 93, 219, 51]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sorted(freqdist, key=operator.itemgetter(1),reverse=True)
[(‘the’, 219), (‘a’, 185), (‘is’, 93), (‘he’, 51)]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h4 id="operatormethodcaller">1.3 operator.methodcaller</h4>

<p>如果遇到一種情況,要根據某個variable的值,來判斷要call哪個function</p>

<p>假設有個class有兩個function,如下:</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>class CallerDemo():
…     def print_a(self):
…         print ‘a’
…     def print_b(self):
…         print ‘b’
… </p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>然後根據variable <code>x</code> 來判斷要call <code>print_a()</code> or <code>print_b()</code> </p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def my_print(x):
…     if x == ‘a’:
…         CallerDemo().print_a()
…     elif x == ‘b’:
…         CallerDemo().print_b()
… </p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_print(‘a’)
a</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_print(‘b’)
b</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣寫真的頗麻煩的,</p>

<p>這個時候可以用 <code>operator.methodcaller</code>, 根據字串名稱,選擇要call哪個function</p>

<p>例如:</p>

<p>```</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>{‘1’:11,’2’:22}.keys()
[‘1’, ‘2’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>operator.methodcaller(‘keys’)({‘1’:11,’2’:22})
[‘1’, ‘2’]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>用了 <code>operator.methodcaller</code> ,改寫之前的 <code>my_print(x)</code> ,一行就夠了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>def my_caller_print(x):
…     operator.methodcaller(“print_%s”%(x))(CallerDemo())</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>執行結果如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_caller_print(‘a’)
a</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_caller_print(‘b’)
b</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="functoolspartial">2 functools.partial</h2>

<p>functools 是一些針對higher-order function的一個模組</p>

<p>這些higher-order function可以把其他function當成argument</p>

<p>先載入一下模組</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import functools</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>我們先來介紹一下 <code>functools.partial</code> 的功能</p>

<p>假設現在要保留某個list之中等於1的element,</p>

<p>可以用到先前提到的 <code>operator</code> 模組,的 <code>operator.eq(a,b)</code> 來比較大小</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>x=1
operator.eq(1,x)
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要搭配 <code>filter</code> 使用,來去掉list中不等於1的element,該怎麼辦呢？</p>

<p>因為 <code>operator.eq(a,b)</code> 需要兩個argument, </p>

<p>但 <code>filter</code> 只能接受一個function與另一個argument</p>

<p>如果要輸入 <code>eq(a,b)</code> 所需要的兩個argument,會出現error,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>filter(operator.eq,1,[1,2,3,1,1,2,2,1,3])
Traceback (most recent call last):
  File “<stdin>", line 1, in <module>
TypeError: filter expected 2 arguments, got 3</module></stdin></p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這個時候,就需要用到 <code>functools.partial</code> 了</p>

<p>它可以先把 <code>operator.eq(a,b)</code> 先和其中一個argument做結合,包成一個function</p>

<p>使用方法如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1=functools.partial(operator.eq,1)</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣產生出來的function, <code>eq1</code> 就只需要一個argument了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1(1)
True</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>eq1(2)
False</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>

    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也就是說,可以把它放到 <code>filter</code> 裡面使用了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>filter(eq1,[1,2,3,1,1,2,2,1,3])
[1, 1, 1, 1]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>再舉一個例子,</p>

<p>如果要十六進位的數轉成十進位,可以用 <code>int()</code> 這個function</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>int(“ABCDEF”,base = 16)
11259375</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>int(“AAAAAA”,base = 16)
11184810</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣每次都要輸入兩個argument,而且第二個argument要一直重複輸入,比較麻煩</p>

<p>可以用 <code>functool.partial</code> 先把int和第二個argument包成一個,如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>base16 = functools.partial(int, base=16)
base16(“ABCDEF”)
11259375</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>base16(“AAAAAA”)
11184810</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣子看起來就簡潔多了</p>

<h2 id="further-reading">Further Reading:</h2>

<p>其實 <code>functool</code> 還有一個很好用的function: <code>functool.wraps</code></p>

<p>但這個跟 <em>Design Pattern</em> 的 <em>decorator</em> 有關</p>

<p>等之後有機會提到 <em>Design Pattern</em> 的時候再來講解</p>

<p>關於本文所講到的,想知道更多,請看：</p>

<p>operator: http://docs.python.org/2/library/operator.html</p>

<p>functools: http://docs.python.org/2/library/functools.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Functional Programming Style 1]]></title>
    <link href="http://ckmarkoh.github.io/blog/2014/03/18/python-functional-programming-style-1/"/>
    <updated>2014-03-18T07:04:00+08:00</updated>
    <id>http://ckmarkoh.github.io/blog/2014/03/18/python-functional-programming-style-1</id>
    <content type="html"><![CDATA[<p>今天來看看如何用python的Functional Programming tool來簡化程式碼</p>

<p>所謂的Functional Programming, 是指像是Lisp或Haskell這樣的程式語言</p>

<p>python所提供的Functional Programming tool</p>

<p>可以用Functional Programming這些語言的風格來寫python</p>

<!--more-->

<h2 id="lambda">1. lambda</h2>

<p>lambda這個詞是來自於Lambda Calculus</p>

<p>簡而言之, Lambda Calculus是一種計算理論</p>

<p>若想了解Lambda Calculus是什麼, 請看:http://en.wikipedia.org/wiki/Lambda_calculus</p>

<p>而 <em>lambda</em> 這個key word在python裡面是用來定義anonymous functions或small function</p>

<p>例如：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_function = lambda x : x+2
print my_function(1)
3</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>或：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print (lambda x : x+2 ) (1)
3</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="map">2. map</h2>

<p>假設有一個function和一個list,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_function = lambda x : x+3
my_list = [1,2,3,4,5]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要把 <code>my_list</code> 中的每個element用 <code>my_function</code> 做運算</p>

<p>例如：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = []
for x in my_list:
…     my_list_2.append(my_function(x))</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print my_list_2
[4, 5, 6, 7, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這可以用map改成這樣：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = map(my_function,my_list)
print my_list_2
[4, 5, 6, 7, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>也可以直接這樣寫</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = map(lambda x : x+3,[1,2,3,4,5])
print my_list_2
[4, 5, 6, 7, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣都可以把for迴圈化簡掉</p>

<p>map也可以用於多個argument的function</p>

<p>例如：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print map(lambda x,y : x*y ,[1,2,3,4], [2,4,6,8])
[2, 8, 18, 32]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="filter">3.filter</h2>

<p>給定一個list如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list = [1,2,3,4,5,6,7,8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>假如要取出 <code>my_list</code> 中為偶數的數字,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = []
for x in my_list:
…     if x%2 == 0:
…             my_list_2.append(x)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print my_list_2
[2, 4, 6, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>filter的概念就是去掉function運算後為False的element,如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = filter(lambda x : x%2 == 0, my_list)
print my_list_2
[2, 4, 6, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣就可以省略掉for和if,把成式碼合併到一行之中</p>

<p>再一例子,如果要把 <code>my_list</code> 中偶數的element取出來後平方,可以這樣寫：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list_2 = filter(lambda x : x**2 if x%2==0 else False, my_list)
print my_list_2
[2, 4, 6, 8]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="reduce">4.reduce</h2>

<p>給定一個list如下</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_list = [3,2,1,6,5,4]</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>如果要算出這個例子的總和,用for迴圈會這樣寫</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sum=0
for x in my_list:
…     sum+=x</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print sum
21</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>這樣至少要寫三行,如果用reduce的話一行就夠了</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>sum = reduce(lambda a,b:a+b,my_list)
print sum
21</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>reduce的概念如下,用這個function把list中前兩個合併成一個</p>

<p>一直這樣合併下去</p>

<p>以下是reduce的分解過程</p>

<p>把程式碼複製後貼到 <em>my_reduce.py</em> 檔案</p>

<p>```python my_reduce.py
def my_reduce(my_fun,my_list):
      print my_list
      if len(my_list) == 1:
              return my_list[0]
      elif len(my_list) &gt;= 2:
              my_list_1 = my_fun(my_list[0], my_list[1])
              return my_reduce(my_fun, [my_list_1] + my_list[2:])
      else:
      		    print “Error: reduce of empty sequence”
              return False</p>

<p>```</p>

<p>到interactive mode 執行看看</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>from my_reduce import *
my_reduce(lambda a,b:a+b,my_list)
[3, 2, 1, 6, 5, 4]
[5, 1, 6, 5, 4]
[6, 6, 5, 4]
[12, 5, 4]
[17, 4]
[21]
21</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>看到了list前面兩個被function合併成一個,這樣繼續合併下去,得出結果</p>

<p>再舉一例,</p>

<p>如果要求出my_list中的最大值, 可以這樣：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>max = reduce(lambda a,b: a if a&gt;=b else b, my_list)
print max
6</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<p>分解過程如下：</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>my_reduce(lambda a,b: a if a&gt;=b else b,my_list)
[3, 2, 1, 6, 5, 4]
[3, 1, 6, 5, 4]
[3, 6, 5, 4]
[6, 5, 4]
[6, 4]
[6]
6</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>```</p>

<h2 id="further-reading">5.Further reading:</h2>

<p>想要看更多關於lambda,map,filter和reduce的用法,請到：</p>

<p>http://www.python-course.eu/lambda.php</p>

<p>http://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools</p>
]]></content>
  </entry>
  
</feed>
